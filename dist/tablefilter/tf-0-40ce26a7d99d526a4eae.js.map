{"version":3,"sources":["webpack:///tf-0-40ce26a7d99d526a4eae.js","webpack:///./src ^\\.\\/.*$","webpack:///./src/extensions/advancedGrid/adapterEzEditTable.js","webpack:///./src/extensions/sort/adapterSortabletable.js","webpack:///./src/extensions/advancedGrid/advancedGrid.js","webpack:///./src/extensions/colOps/colOps.js","webpack:///./src/extensions/colsVisibility/colsVisibility.js","webpack:///./src/extensions/filtersVisibility/filtersVisibility.js","webpack:///./src/extensions/sort/sort.js","webpack:///./~/format-number/index.js","webpack:///./libs/sortabletable.js","webpack:///./~/script-loader/addScript.js","webpack:///./libs/sortabletable.js?534d"],"names":["webpackJsonp","437","module","exports","__webpack_require__","webpackContext","req","webpackContextResolve","id","map","Error","./array","./array.js","./const","./const.js","./cookie","./cookie.js","./dom","./dom.js","./emitter","./emitter.js","./event","./event.js","./extensions/advancedGrid/adapterEzEditTable","./extensions/advancedGrid/adapterEzEditTable.js","./extensions/advancedGrid/advancedGrid","./extensions/advancedGrid/advancedGrid.js","./extensions/colOps/colOps","./extensions/colOps/colOps.js","./extensions/colsVisibility/colsVisibility","./extensions/colsVisibility/colsVisibility.js","./extensions/filtersVisibility/filtersVisibility","./extensions/filtersVisibility/filtersVisibility.js","./extensions/sort/adapterSortabletable","./extensions/sort/adapterSortabletable.js","./extensions/sort/sort","./extensions/sort/sort.js","./feature","./feature.js","./modules/alternateRows","./modules/alternateRows.js","./modules/checkList","./modules/checkList.js","./modules/clearButton","./modules/clearButton.js","./modules/dateType","./modules/dateType.js","./modules/dropdown","./modules/dropdown.js","./modules/gridLayout","./modules/gridLayout.js","./modules/hash","./modules/hash.js","./modules/help","./modules/help.js","./modules/highlightKeywords","./modules/highlightKeywords.js","./modules/loader","./modules/loader.js","./modules/markActiveColumns","./modules/markActiveColumns.js","./modules/noResults","./modules/noResults.js","./modules/paging","./modules/paging.js","./modules/popupFilter","./modules/popupFilter.js","./modules/rowsCounter","./modules/rowsCounter.js","./modules/state","./modules/state.js","./modules/statusBar","./modules/statusBar.js","./modules/storage","./modules/storage.js","./number","./number.js","./root","./root.js","./sort","./sort.js","./string","./string.js","./tablefilter","./tablefilter.js","./types","./types.js","keys","Object","resolve","438","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","defineProperty","_feature","_dom","_const","_root","AdapterEzEditTable","_Feature","tf","cfg","this","_this","name","desc","description","filename","vendorPath","vendor_path","loadStylesheet","Boolean","load_stylesheet","stylesheet","stylesheetName","stylesheet_name","scroll_into_view","gridLayout","_ezEditTable","enable","init","_this2","initialized","root","EditTable","_setAdvancedGrid","path","import","isImported","emitter","on","_toggleForInputFilter","startRow","tag","dom","length","undefined","refRow","base_path","basePath","editable","selectable","selection","default_selection","active_cell_css","_lastValidRowIndex","_lastRowIndex","onAfterSelection","et","selectedElm","e","slc","Selection","doSelect","nextRowIndex","defaultSelection","SelectRowByIndex","ClearSelections","cellIndex","row","rows","SelectCell","cells","validRowsIndex","getRowsNb","r","scrollIntoView","cell","getCellsNb","tblCont","scrollLeft","validIndexes","validIdxLen","parentNode","nodeName","keyCode","Event","GetKey","isRowValid","indexOf","rowIndex","paging","feature","d","pagingLength","nbRowsPerPage","calcRowIndex","v","onBeforeSelection","nbPages","pagingEndRow","parseInt","startPagingRow","currentPageNb","setPage","onAfterChangePage","advGrid","extension","GetActiveRow","GetActiveCell","fnB","on_before_selected_row","args","arguments","fnA","on_after_selected_row","fnD","on_before_selected_cell","fnC","on_after_selected_cell","fnE","on_added_dom_row","nbFilterableRows","destroy","reset","emit","alternateRows","actions","fnF","on_after_submit","Init","INSTANTIATION_ERROR","ezEditTable","Set","Editable","toggle","Remove","getActiveFilterId","colIndex","getColumnIndexFromFilterId","getFilterType","filterType","_this3","off","Feature","default","439","ipAddress","vals","split","x","val","join","sortIP","a","b","aa","toLowerCase","bb","_types","_event","_number","AdapterSortableTable","opts","sorted","sortTypes","isArray","types","colTypes","sortColAtStart","sort_col_at_start","asyncSort","async_sort","triggerIds","trigger_ids","imgPath","images_path","themesPath","imgBlank","image_blank","imgClassName","image_class_name","imgAscClassName","image_asc_class_name","imgDescClassName","image_desc_class_name","customKey","custom_key","onSortLoaded","isFn","on_sort_loaded","EMPTY_FN","onBeforeSort","on_before_sort","onAfterSort","on_after_sort","stt","adpt","isUndef","SortableTable","overrideSortableTable","setSortTypes","onbeforesort","sortColumn","disable","onsort","paginator","getValidRows","getPage","descending","sort","colIdx","sortByColumnIndex","headerOnclick","evt","el","target","srcElement","tagName","CELL_TAG","HEADER_TAG","msie","getCellIndex","oTd","l","i","initHeader","oSortTypes","tHead","headTbl","headersRow","img","c","style","cursor","createElm","appendChild","setAttribute","addEvt","_headerOnclick","_sortType","updateHeaderArrows","triggers","j","push","elm","cellAttr","getAttribute","lastChild","className","getRowValue","oRow","sType","nColumn","sortTypeInfo","_sortTypeInfo","s","getInnerText","getValueFromString","oNode","getText","addSortType","_len","Array","_key","caster","sorter","_sortTypes","nbCells","colType","isObj","type","DATE","_addDateType","FORMATTED_NUMBER","decimal","decimalSeparator","_addNumberType","toUpperCase","STRING","IP_ADDRESS","trigger","dateType","locale","getOptions","parsedDate","parse","isNaN","Date","_this4","ids","getFiltersId","idx","header","getHeaderElement","removeChild","440","_adapterEzEditTable","_adapterEzEditTable2","obj","__esModule","441","_sort","_formatNumber","_formatNumber2","EVENTS","ColOps","onBeforeOperation","on_before_operation","onAfterOperation","on_after_operation","labelIds","colIndexes","col","operations","operation","outputTypes","write_method","formatResults","format_result","totRowIndexes","tot_row_index","excludeRows","exclude_row","decimalPrecisions","decimal_precision","calcAll","isInitialized","colOperations","uIndexes","forEach","nbCols","colValues","u","getVisibleColumnData","curValues","result","precisions","labels","writeType","formatResult","k","configureFormat","Number","calc","writeResult","totRow","display","columnCalc","precision","sortColumnValues","numSortAsc","calcMean","calcSum","calcMin","calcMax","calcMedian","calcQ1","calcQ3","isEmpty","toFixed","values","reduce","y","Math","max","apply","min","nbValues","aux","floor","posa","posb","label","format","labelElm","isFinite","innerHTML","oldNode","firstChild","txtNode","createText","replaceChild","hasType","thousands","integerSeparator","442","ColsVisibility","f","config","spanEl","btnEl","contEl","tickToHide","tick_to_hide","manager","headersTbl","headers_table","headersIndex","headers_index","contElTgtId","container_target_id","headersText","headers_text","btnTgtId","btn_target_id","btnText","btn_text","btnHtml","btn_html","btnCssClass","btn_css_class","btnCloseText","btn_close_text","btnCloseHtml","btn_close_html","btnCloseCssClass","btn_close_css_class","spanCssClass","span_css_class","contCssClass","cont_css_class","listCssClass","list_css_class","listItemCssClass","checklist_item_css_class","listSlcItemCssClass","checklist_selected_item_css_class","text","atStart","at_start","enableHover","enable_hover","enableTickAll","enable_tick_all","tickAllText","tick_all_text","hiddenCols","boundMouseup","onLoaded","on_loaded","onBeforeOpen","on_before_open","onAfterOpen","on_after_open","onBeforeClose","on_before_close","onAfterClose","on_after_close","onBeforeColHidden","on_before_col_hidden","onAfterColHidden","on_after_col_hidden","onBeforeColDisplayed","on_before_col_displayed","onAfterColDisplayed","on_after_col_displayed","stylePath","onMouseup","targetElm","targetEvt","removeEvt","contDisplay","checkItem","lbl","li","isChecked","checked","addClass","removeClass","hide","setHidden","hideCol","buildBtn","buildManager","bind","_hideAtStart","span","setToolbar","targetEl","rDiv","insertBefore","colVisEl","btn","title","container","extNameLabel","ul","tbl","headerIndex","getHeadersRowIndex","headerRow","createCheckItem","check","h","itm","click","cellText","_getHeaderText","liElm","p","_hideCells","itemIndex","splice","gridColElms","colElms","hiddenWidth","width","headTblW","showCol","isColHidden","toggleCol","getHiddenCols","_this5","removeElm","hasChildNodes","childNodes","n","nodeType","nodeValue","_this6","443","FiltersVisibility","icnExpand","expand_icon_name","icnCollapse","collapse_icon_name","icnExpandHtml","icnCollapseHtml","defaultText","targetId","target_id","enableIcon","enable_icon","collapseBtnHtml","expandBtnHtml","filtersRowIndex","filters_row_index","getFiltersRowIndex","visibleAtStart","visible_at_start","onBeforeShow","on_before_show","onAfterShow","on_after_show","onBeforeHide","on_before_hide","onAfterHide","on_after_hide","buildUI","visible","show","fltRow","isDisplayed","444","_adapterSortabletable","_adapterSortabletable2","445","formatter","options","number","overrideOptions","output","negative","charAt","replace","negativeLeftOut","noUnits","prefix","negativeLeftSymbol","round","truncate","padLeft","padRight","noSeparator","addDecimalSeparators","decimalsSeparator","addIntegerSeparators","negativeRightOut","suffix","negativeRightSymbol","unformat","allowedSeparators","newNumber","negativeType","negativeOut","separator","separate","rgx","test","padding","buf","substr","places","decim","slice","leadingzeros","substring","446","447","src","execScript","eval","448"],"mappings":"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","file":"tf-0-40ce26a7d99d526a4eae.js","sourcesContent":["webpackJsonp([0],{\n\n/***/ 437:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar map = {\n\t\"./array\": 67,\n\t\"./array.js\": 67,\n\t\"./const\": 15,\n\t\"./const.js\": 15,\n\t\"./cookie\": 121,\n\t\"./cookie.js\": 121,\n\t\"./dom\": 8,\n\t\"./dom.js\": 8,\n\t\"./emitter\": 69,\n\t\"./emitter.js\": 69,\n\t\"./event\": 17,\n\t\"./event.js\": 17,\n\t\"./extensions/advancedGrid/adapterEzEditTable\": 438,\n\t\"./extensions/advancedGrid/adapterEzEditTable.js\": 438,\n\t\"./extensions/advancedGrid/advancedGrid\": 440,\n\t\"./extensions/advancedGrid/advancedGrid.js\": 440,\n\t\"./extensions/colOps/colOps\": 441,\n\t\"./extensions/colOps/colOps.js\": 441,\n\t\"./extensions/colsVisibility/colsVisibility\": 442,\n\t\"./extensions/colsVisibility/colsVisibility.js\": 442,\n\t\"./extensions/filtersVisibility/filtersVisibility\": 443,\n\t\"./extensions/filtersVisibility/filtersVisibility.js\": 443,\n\t\"./extensions/sort/adapterSortabletable\": 439,\n\t\"./extensions/sort/adapterSortabletable.js\": 439,\n\t\"./extensions/sort/sort\": 444,\n\t\"./extensions/sort/sort.js\": 444,\n\t\"./feature\": 9,\n\t\"./feature.js\": 9,\n\t\"./modules/alternateRows\": 70,\n\t\"./modules/alternateRows.js\": 70,\n\t\"./modules/checkList\": 71,\n\t\"./modules/checkList.js\": 71,\n\t\"./modules/clearButton\": 72,\n\t\"./modules/clearButton.js\": 72,\n\t\"./modules/dateType\": 73,\n\t\"./modules/dateType.js\": 73,\n\t\"./modules/dropdown\": 74,\n\t\"./modules/dropdown.js\": 74,\n\t\"./modules/gridLayout\": 75,\n\t\"./modules/gridLayout.js\": 75,\n\t\"./modules/hash\": 122,\n\t\"./modules/hash.js\": 122,\n\t\"./modules/help\": 76,\n\t\"./modules/help.js\": 76,\n\t\"./modules/highlightKeywords\": 77,\n\t\"./modules/highlightKeywords.js\": 77,\n\t\"./modules/loader\": 78,\n\t\"./modules/loader.js\": 78,\n\t\"./modules/markActiveColumns\": 79,\n\t\"./modules/markActiveColumns.js\": 79,\n\t\"./modules/noResults\": 80,\n\t\"./modules/noResults.js\": 80,\n\t\"./modules/paging\": 81,\n\t\"./modules/paging.js\": 81,\n\t\"./modules/popupFilter\": 82,\n\t\"./modules/popupFilter.js\": 82,\n\t\"./modules/rowsCounter\": 83,\n\t\"./modules/rowsCounter.js\": 83,\n\t\"./modules/state\": 84,\n\t\"./modules/state.js\": 84,\n\t\"./modules/statusBar\": 85,\n\t\"./modules/statusBar.js\": 85,\n\t\"./modules/storage\": 123,\n\t\"./modules/storage.js\": 123,\n\t\"./number\": 68,\n\t\"./number.js\": 68,\n\t\"./root\": 14,\n\t\"./root.js\": 14,\n\t\"./sort\": 66,\n\t\"./sort.js\": 66,\n\t\"./string\": 19,\n\t\"./string.js\": 19,\n\t\"./tablefilter\": 124,\n\t\"./tablefilter.js\": 124,\n\t\"./types\": 10,\n\t\"./types.js\": 10\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 437;\n\n/***/ }),\n\n/***/ 438:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _feature = __webpack_require__(9);\n\nvar _dom = __webpack_require__(8);\n\nvar _const = __webpack_require__(15);\n\nvar _root = __webpack_require__(14);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar INSTANTIATION_ERROR = 'Failed to instantiate EditTable object.\\n    \\n\"ezEditTable\" dependency not found.';\n\n/**\n * Adapter module for ezEditTable, an external library providing advanced\n * grid features (selection and edition):\n * http://codecanyon.net/item/ezedittable-enhance-html-tables/2425123?ref=koalyptus\n */\n\nvar AdapterEzEditTable = function (_Feature) {\n    _inherits(AdapterEzEditTable, _Feature);\n\n    /**\n     * Creates an instance of AdapterEzEditTable\n     *\n     * @param {TableFilter} tf TableFilter instance\n     * @param {Object} cfg Configuration options for ezEditTable library\n     */\n    function AdapterEzEditTable(tf, cfg) {\n        _classCallCheck(this, AdapterEzEditTable);\n\n        /**\n         * Module description\n         * @type {String}\n         */\n        var _this = _possibleConstructorReturn(this, _Feature.call(this, tf, cfg.name));\n\n        _this.desc = cfg.description || 'ezEditTable adapter';\n\n        /**\n         * Filename of ezEditTable library\n         * @type {String}\n         */\n        _this.filename = cfg.filename || 'ezEditTable.js';\n\n        /**\n         * Path to ezEditTable library\n         * @type {String}\n         */\n        _this.vendorPath = cfg.vendor_path;\n\n        /**\n         * Load ezEditTable stylesheet\n         * @type {Boolean}\n         */\n        _this.loadStylesheet = Boolean(cfg.load_stylesheet);\n\n        /**\n         * Path to ezEditTable stylesheet\n         * @type {String}\n         */\n        _this.stylesheet = cfg.stylesheet || _this.vendorPath + 'ezEditTable.css';\n\n        /**\n         * Name of ezEditTable stylesheet\n         * @type {String}\n         */\n        _this.stylesheetName = cfg.stylesheet_name || 'ezEditTableCss';\n\n        // Enable the ezEditTable's scroll into view behaviour if grid layout on\n        cfg.scroll_into_view = cfg.scroll_into_view === false ? false : tf.gridLayout;\n\n        /**\n         * ezEditTable instance\n         * @type {EditTable}\n         * @private\n         */\n        _this._ezEditTable = null;\n\n        /**\n         * ezEditTable configuration\n         * @private\n         */\n        _this.cfg = cfg;\n\n        _this.enable();\n        return _this;\n    }\n\n    /**\n     * Conditionally load ezEditTable library and set advanced grid\n     */\n\n\n    AdapterEzEditTable.prototype.init = function init() {\n        var _this2 = this;\n\n        if (this.initialized) {\n            return;\n        }\n        var tf = this.tf;\n        if (_root.root.EditTable) {\n            this._setAdvancedGrid();\n        } else {\n            var path = this.vendorPath + this.filename;\n            tf.import(this.filename, path, function () {\n                return _this2._setAdvancedGrid();\n            });\n        }\n        if (this.loadStylesheet && !tf.isImported(this.stylesheet, 'link')) {\n            tf.import(this.stylesheetName, this.stylesheet, null, 'link');\n        }\n\n        // TODO: hack to prevent ezEditTable enter key event hijaking.\n        // Needs to be fixed in the vendor's library\n        this.emitter.on(['filter-focus', 'filter-blur'], function () {\n            return _this2._toggleForInputFilter();\n        });\n\n        /**\n         * @inherited\n         */\n        this.initialized = true;\n    };\n\n    /**\n     * Instantiate ezEditTable component for advanced grid features\n     * @private\n     */\n\n\n    AdapterEzEditTable.prototype._setAdvancedGrid = function _setAdvancedGrid() {\n        var tf = this.tf;\n\n        //start row for EditTable constructor needs to be calculated\n        var startRow = void 0,\n            cfg = this.cfg,\n            thead = (0, _dom.tag)(tf.dom(), 'thead');\n\n        //if thead exists and startRow not specified, startRow is calculated\n        //automatically by EditTable\n        if (thead.length > 0 && !cfg.startRow) {\n            startRow = undefined;\n        }\n        //otherwise startRow config property if any or TableFilter refRow\n        else {\n                startRow = cfg.startRow || tf.refRow;\n            }\n\n        cfg.base_path = cfg.base_path || tf.basePath + 'ezEditTable/';\n        var editable = cfg.editable;\n        var selectable = cfg.selection;\n\n        if (selectable) {\n            cfg.default_selection = cfg.default_selection || 'row';\n        }\n        //CSS Styles\n        cfg.active_cell_css = cfg.active_cell_css || 'ezETSelectedCell';\n\n        var _lastValidRowIndex = 0;\n        var _lastRowIndex = 0;\n\n        if (selectable) {\n            //Row navigation needs to be calculated according to TableFilter's\n            //validRowsIndex array\n            var onAfterSelection = function onAfterSelection(et, selectedElm, e) {\n                var slc = et.Selection;\n                //Next valid filtered row needs to be selected\n                var doSelect = function doSelect(nextRowIndex) {\n                    if (et.defaultSelection === 'row') {\n                        /* eslint-disable */\n                        slc.SelectRowByIndex(nextRowIndex);\n                        /* eslint-enable */\n                    } else {\n                        /* eslint-disable */\n                        et.ClearSelections();\n                        /* eslint-enable */\n                        var cellIndex = selectedElm.cellIndex,\n                            _row = tf.dom().rows[nextRowIndex];\n                        if (et.defaultSelection === 'both') {\n                            /* eslint-disable */\n                            slc.SelectRowByIndex(nextRowIndex);\n                            /* eslint-enable */\n                        }\n                        if (_row) {\n                            /* eslint-disable */\n                            slc.SelectCell(_row.cells[cellIndex]);\n                            /* eslint-enable */\n                        }\n                    }\n                    //Table is filtered\n                    if (tf.validRowsIndex.length !== tf.getRowsNb()) {\n                        var r = tf.dom().rows[nextRowIndex];\n                        if (r) {\n                            r.scrollIntoView(false);\n                        }\n                        if (cell) {\n                            if (cell.cellIndex === tf.getCellsNb() - 1 && tf.gridLayout) {\n                                tf.tblCont.scrollLeft = 100000000;\n                            } else if (cell.cellIndex === 0 && tf.gridLayout) {\n                                tf.tblCont.scrollLeft = 0;\n                            } else {\n                                cell.scrollIntoView(false);\n                            }\n                        }\n                    }\n                };\n\n                //table is not filtered\n                if (!tf.validRowsIndex) {\n                    return;\n                }\n                var validIndexes = tf.validRowsIndex,\n                    validIdxLen = validIndexes.length,\n                    row = et.defaultSelection !== 'row' ? selectedElm.parentNode : selectedElm,\n\n                //cell for default_selection = 'both' or 'cell'\n                cell = selectedElm.nodeName === 'TD' ? selectedElm : null,\n\n                /* eslint-disable */\n                keyCode = e !== undefined ? et.Event.GetKey(e) : 0,\n\n                /* eslint-enable */\n                isRowValid = validIndexes.indexOf(row.rowIndex) !== -1,\n                    nextRowIndex = void 0,\n                    paging = tf.feature('paging'),\n\n                //pgup/pgdown keys\n                d = keyCode === 34 || keyCode === 33 ? paging && paging.pagingLength || et.nbRowsPerPage : 1;\n\n                //If next row is not valid, next valid filtered row needs to be\n                //calculated\n                if (!isRowValid) {\n                    //Selection direction up/down\n                    if (row.rowIndex > _lastRowIndex) {\n                        //last row\n                        if (row.rowIndex >= validIndexes[validIdxLen - 1]) {\n                            nextRowIndex = validIndexes[validIdxLen - 1];\n                        } else {\n                            var calcRowIndex = _lastValidRowIndex + d;\n                            if (calcRowIndex > validIdxLen - 1) {\n                                nextRowIndex = validIndexes[validIdxLen - 1];\n                            } else {\n                                nextRowIndex = validIndexes[calcRowIndex];\n                            }\n                        }\n                    } else {\n                        //first row\n                        if (row.rowIndex <= validIndexes[0]) {\n                            nextRowIndex = validIndexes[0];\n                        } else {\n                            var v = validIndexes[_lastValidRowIndex - d];\n                            nextRowIndex = v ? v : validIndexes[0];\n                        }\n                    }\n                    _lastRowIndex = row.rowIndex;\n                    doSelect(nextRowIndex);\n                } else {\n                    //If filtered row is valid, special calculation for\n                    //pgup/pgdown keys\n                    if (keyCode !== 34 && keyCode !== 33) {\n                        _lastValidRowIndex = validIndexes.indexOf(row.rowIndex);\n                        _lastRowIndex = row.rowIndex;\n                    } else {\n                        if (keyCode === 34) {\n                            //pgdown\n                            //last row\n                            if (_lastValidRowIndex + d <= validIdxLen - 1) {\n                                nextRowIndex = validIndexes[_lastValidRowIndex + d];\n                            } else {\n                                nextRowIndex = [validIdxLen - 1];\n                            }\n                        } else {\n                            //pgup\n                            //first row\n                            if (_lastValidRowIndex - d <= validIndexes[0]) {\n                                nextRowIndex = validIndexes[0];\n                            } else {\n                                nextRowIndex = validIndexes[_lastValidRowIndex - d];\n                            }\n                        }\n                        _lastRowIndex = nextRowIndex;\n                        _lastValidRowIndex = validIndexes.indexOf(nextRowIndex);\n                        doSelect(nextRowIndex);\n                    }\n                }\n            };\n\n            //Page navigation has to be enforced whenever selected row is out of\n            //the current page range\n            var onBeforeSelection = function onBeforeSelection(et, selectedElm) {\n                var row = et.defaultSelection !== 'row' ? selectedElm.parentNode : selectedElm;\n                if (tf.paging) {\n                    if (tf.feature('paging').nbPages > 1) {\n                        var paging = tf.feature('paging');\n                        //page length is re-assigned in case it has changed\n                        et.nbRowsPerPage = paging.pagingLength;\n                        var validIndexes = tf.validRowsIndex,\n                            validIdxLen = validIndexes.length,\n                            pagingEndRow = parseInt(paging.startPagingRow, 10) + parseInt(paging.pagingLength, 10);\n                        var rowIndex = row.rowIndex;\n\n                        if (rowIndex === validIndexes[validIdxLen - 1] && paging.currentPageNb !== paging.nbPages) {\n                            paging.setPage('last');\n                        } else if (rowIndex === validIndexes[0] && paging.currentPageNb !== 1) {\n                            paging.setPage('first');\n                        } else if (rowIndex > validIndexes[pagingEndRow - 1] && rowIndex < validIndexes[validIdxLen - 1]) {\n                            paging.setPage('next');\n                        } else if (rowIndex < validIndexes[paging.startPagingRow] && rowIndex > validIndexes[0]) {\n                            paging.setPage('previous');\n                        }\n                    }\n                }\n            };\n\n            //Selected row needs to be visible when paging is activated\n            if (tf.paging) {\n                tf.feature('paging').onAfterChangePage = function (paging) {\n                    var advGrid = paging.tf.extension('advancedGrid');\n                    var et = advGrid._ezEditTable;\n                    var slc = et.Selection;\n                    /* eslint-disable */\n                    var row = slc.GetActiveRow();\n                    /* eslint-enable */\n                    if (row) {\n                        row.scrollIntoView(false);\n                    }\n                    /* eslint-disable */\n                    var cell = slc.GetActiveCell();\n                    /* eslint-enable */\n                    if (cell) {\n                        cell.scrollIntoView(false);\n                    }\n                };\n            }\n\n            //Rows navigation when rows are filtered is performed with the\n            //EditTable row selection callback events\n            if (cfg.default_selection === 'row') {\n                var fnB = cfg.on_before_selected_row;\n                cfg.on_before_selected_row = function () {\n                    var args = arguments;\n                    onBeforeSelection(args[0], args[1], args[2]);\n                    if (fnB) {\n                        fnB.call(null, args[0], args[1], args[2]);\n                    }\n                };\n                var fnA = cfg.on_after_selected_row;\n                cfg.on_after_selected_row = function () {\n                    var args = arguments;\n                    onAfterSelection(args[0], args[1], args[2]);\n                    if (fnA) {\n                        fnA.call(null, args[0], args[1], args[2]);\n                    }\n                };\n            } else {\n                var fnD = cfg.on_before_selected_cell;\n                cfg.on_before_selected_cell = function () {\n                    var args = arguments;\n                    onBeforeSelection(args[0], args[1], args[2]);\n                    if (fnD) {\n                        fnD.call(null, args[0], args[1], args[2]);\n                    }\n                };\n                var fnC = cfg.on_after_selected_cell;\n                cfg.on_after_selected_cell = function () {\n                    var args = arguments;\n                    onAfterSelection(args[0], args[1], args[2]);\n                    if (fnC) {\n                        fnC.call(null, args[0], args[1], args[2]);\n                    }\n                };\n            }\n        }\n        if (editable) {\n            //Added or removed rows, TF rows number needs to be re-calculated\n            var fnE = cfg.on_added_dom_row;\n            cfg.on_added_dom_row = function () {\n                var args = arguments;\n                tf.nbFilterableRows++;\n                if (!tf.paging) {\n                    tf.emitter.emit('rows-changed', tf, this);\n                } else {\n                    tf.nbFilterableRows++;\n                    tf.paging = false;\n                    tf.feature('paging').destroy();\n                    tf.feature('paging').reset();\n                }\n                if (tf.alternateRows) {\n                    tf.feature('alternateRows').init();\n                }\n                if (fnE) {\n                    fnE.call(null, args[0], args[1], args[2]);\n                }\n            };\n            if (cfg.actions && cfg.actions['delete']) {\n                var fnF = cfg.actions['delete'].on_after_submit;\n                cfg.actions['delete'].on_after_submit = function () {\n                    var args = arguments;\n                    tf.nbFilterableRows--;\n                    if (!tf.paging) {\n                        tf.emitter.emit('rows-changed', tf, this);\n                    } else {\n                        tf.nbFilterableRows--;\n                        tf.paging = false;\n                        tf.feature('paging').destroy();\n                        tf.feature('paging').reset(false);\n                    }\n                    if (tf.alternateRows) {\n                        tf.feature('alternateRows').init();\n                    }\n                    if (fnF) {\n                        fnF.call(null, args[0], args[1]);\n                    }\n                };\n            }\n        }\n\n        try {\n            /* eslint-disable */\n            this._ezEditTable = new EditTable(tf.id, cfg, startRow);\n            this._ezEditTable.Init();\n            /* eslint-enable */\n        } catch (e) {\n            throw new Error(INSTANTIATION_ERROR);\n        }\n\n        this.initialized = true;\n    };\n\n    /**\n     * Reset advanced grid when previously removed\n     */\n\n\n    AdapterEzEditTable.prototype.reset = function reset() {\n        var ezEditTable = this._ezEditTable;\n        if (ezEditTable) {\n            if (this.cfg.selection) {\n                /* eslint-disable */\n                ezEditTable.Selection.Set();\n                /* eslint-enable */\n            }\n            if (this.cfg.editable) {\n                /* eslint-disable */\n                ezEditTable.Editable.Set();\n                /* eslint-enable */\n            }\n        }\n    };\n\n    /**\n     * Toggle behaviour\n     */\n\n\n    AdapterEzEditTable.prototype.toggle = function toggle() {\n        var ezEditTable = this._ezEditTable;\n        if (ezEditTable.editable) {\n            /* eslint-disable */\n            ezEditTable.Editable.Remove();\n            /* eslint-enable */\n        } else {\n            /* eslint-disable */\n            ezEditTable.Editable.Set();\n            /* eslint-enable */\n        }\n        if (ezEditTable.selection) {\n            /* eslint-disable */\n            ezEditTable.Selection.Remove();\n            /* eslint-enable */\n        } else {\n            /* eslint-disable */\n            ezEditTable.Selection.Set();\n            /* eslint-enable */\n        }\n    };\n\n    AdapterEzEditTable.prototype._toggleForInputFilter = function _toggleForInputFilter() {\n        var tf = this.tf;\n        if (!tf.getActiveFilterId()) {\n            return;\n        }\n        var colIndex = tf.getColumnIndexFromFilterId(tf.getActiveFilterId());\n        var filterType = tf.getFilterType(colIndex);\n        if (filterType === _const.INPUT) {\n            this.toggle();\n        }\n    };\n\n    /**\n     * Remove advanced grid\n     */\n\n\n    AdapterEzEditTable.prototype.destroy = function destroy() {\n        var _this3 = this;\n\n        if (!this.initialized) {\n            return;\n        }\n        var ezEditTable = this._ezEditTable;\n        if (ezEditTable) {\n            if (this.cfg.selection) {\n                /* eslint-disable */\n                ezEditTable.Selection.ClearSelections();\n                ezEditTable.Selection.Remove();\n                /* eslint-enable */\n            }\n            if (this.cfg.editable) {\n                /* eslint-disable */\n                ezEditTable.Editable.Remove();\n                /* eslint-enable */\n            }\n        }\n\n        this.emitter.off(['filter-focus', 'filter-blur'], function () {\n            return _this3._toggleForInputFilter();\n        });\n        this.initialized = false;\n    };\n\n    return AdapterEzEditTable;\n}(_feature.Feature);\n\nexports.default = AdapterEzEditTable;\n\n/***/ }),\n\n/***/ 439:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _feature = __webpack_require__(9);\n\nvar _types = __webpack_require__(10);\n\nvar _dom = __webpack_require__(8);\n\nvar _event = __webpack_require__(17);\n\nvar _number = __webpack_require__(68);\n\nvar _const = __webpack_require__(15);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * SortableTable Adapter module\n */\nvar AdapterSortableTable = function (_Feature) {\n    _inherits(AdapterSortableTable, _Feature);\n\n    /**\n     * Creates an instance of AdapterSortableTable\n     * @param {TableFilter} tf TableFilter instance\n     * @param {Object} opts Configuration object\n     */\n    function AdapterSortableTable(tf, opts) {\n        _classCallCheck(this, AdapterSortableTable);\n\n        /**\n         * Module name\n         * @type {String}\n         */\n        var _this = _possibleConstructorReturn(this, _Feature.call(this, tf, opts.name));\n\n        _this.name = opts.name;\n\n        /**\n         * Module description\n         * @type {String}\n         */\n        _this.desc = opts.description || 'Sortable table';\n\n        /**\n         * Indicate whether table previously sorted\n         * @type {Boolean}\n         * @private\n         */\n        _this.sorted = false;\n\n        /**\n         * List of sort type per column basis\n         * @type {Array}\n         */\n        _this.sortTypes = (0, _types.isArray)(opts.types) ? opts.types : tf.colTypes;\n\n        /**\n         * Column to be sorted at initialization, ie:\n         * sort_col_at_start: [1, true]\n         * @type {Array}\n         */\n        _this.sortColAtStart = (0, _types.isArray)(opts.sort_col_at_start) ? opts.sort_col_at_start : null;\n\n        /**\n         * Enable asynchronous sort, if triggers are external\n         * @type {Boolean}\n         */\n        _this.asyncSort = Boolean(opts.async_sort);\n\n        /**\n         * List of element IDs triggering sort on a per column basis\n         * @type {Array}\n         */\n        _this.triggerIds = (0, _types.isArray)(opts.trigger_ids) ? opts.trigger_ids : [];\n\n        // edit .sort-arrow.descending / .sort-arrow.ascending in\n        // tablefilter.css to reflect any path change\n        /**\n         * Path to images\n         * @type {String}\n         */\n        _this.imgPath = opts.images_path || tf.themesPath;\n\n        /**\n         * Blank image file name\n         * @type {String}\n         */\n        _this.imgBlank = opts.image_blank || 'blank.png';\n\n        /**\n         * Css class for sort indicator image\n         * @type {String}\n         */\n        _this.imgClassName = opts.image_class_name || 'sort-arrow';\n\n        /**\n         * Css class for ascending sort indicator image\n         * @type {String}\n         */\n        _this.imgAscClassName = opts.image_asc_class_name || 'ascending';\n\n        /**\n         * Css class for descending sort indicator image\n         * @type {String}\n         */\n        _this.imgDescClassName = opts.image_desc_class_name || 'descending';\n\n        /**\n         * Cell attribute key storing custom value used for sorting\n         * @type {String}\n         */\n        _this.customKey = opts.custom_key || 'data-tf-sortKey';\n\n        /**\n         * Callback fired when sort extension is instanciated\n         * @type {Function}\n         */\n        _this.onSortLoaded = (0, _types.isFn)(opts.on_sort_loaded) ? opts.on_sort_loaded : _types.EMPTY_FN;\n\n        /**\n         * Callback fired before a table column is sorted\n         * @type {Function}\n         */\n        _this.onBeforeSort = (0, _types.isFn)(opts.on_before_sort) ? opts.on_before_sort : _types.EMPTY_FN;\n\n        /**\n         * Callback fired after a table column is sorted\n         * @type {Function}\n         */\n        _this.onAfterSort = (0, _types.isFn)(opts.on_after_sort) ? opts.on_after_sort : _types.EMPTY_FN;\n\n        /**\n         * SortableTable instance\n         * @private\n         */\n        _this.stt = null;\n\n        _this.enable();\n        return _this;\n    }\n\n    /**\n     * Initializes AdapterSortableTable instance\n     */\n\n\n    AdapterSortableTable.prototype.init = function init() {\n        var _this2 = this;\n\n        if (this.initialized) {\n            return;\n        }\n        var tf = this.tf;\n        var adpt = this;\n\n        // SortableTable class sanity check (sortabletable.js)\n        if ((0, _types.isUndef)(SortableTable)) {\n            throw new Error('SortableTable class not found.');\n        }\n\n        // Add any date format if needed\n        this.emitter.emit('add-date-type-formats', this.tf, this.sortTypes);\n\n        this.overrideSortableTable();\n        this.setSortTypes();\n\n        this.onSortLoaded(tf, this);\n\n        /*** SortableTable callbacks ***/\n        this.stt.onbeforesort = function () {\n            adpt.onBeforeSort(tf, adpt.stt.sortColumn);\n\n            /*** sort behaviour for paging ***/\n            if (tf.paging) {\n                tf.feature('paging').disable();\n            }\n        };\n\n        this.stt.onsort = function () {\n            adpt.sorted = true;\n\n            //sort behaviour for paging\n            if (tf.paging) {\n                var paginator = tf.feature('paging');\n                // recalculate valid rows index as sorting may have change it\n                tf.getValidRows(true);\n                paginator.enable();\n                paginator.setPage(paginator.getPage());\n            }\n\n            adpt.onAfterSort(tf, adpt.stt.sortColumn, adpt.stt.descending);\n            adpt.emitter.emit('column-sorted', tf, adpt.stt.sortColumn, adpt.stt.descending);\n        };\n\n        // Column sort at start\n        var sortColAtStart = adpt.sortColAtStart;\n        if (sortColAtStart) {\n            this.stt.sort(sortColAtStart[0], sortColAtStart[1]);\n        }\n\n        this.emitter.on(['sort'], function (tf, colIdx, desc) {\n            return _this2.sortByColumnIndex(colIdx, desc);\n        });\n\n        /** @inherited */\n        this.initialized = true;\n\n        this.emitter.emit('sort-initialized', tf, this);\n    };\n\n    /**\n     * Sort specified column\n     * @param {Number} colIdx Column index\n     * @param {Boolean} desc Optional: descending manner\n     */\n\n\n    AdapterSortableTable.prototype.sortByColumnIndex = function sortByColumnIndex(colIdx, desc) {\n        this.stt.sort(colIdx, desc);\n    };\n\n    /**\n     * Set SortableTable overrides for TableFilter integration\n     */\n\n\n    AdapterSortableTable.prototype.overrideSortableTable = function overrideSortableTable() {\n        var adpt = this,\n            tf = this.tf;\n\n        /**\n         * Overrides headerOnclick method in order to handle th event\n         * @param  {Object} e [description]\n         */\n        SortableTable.prototype.headerOnclick = function (evt) {\n            if (!adpt.initialized) {\n                return;\n            }\n\n            // find Header element\n            var el = evt.target || evt.srcElement;\n\n            while (el.tagName !== _const.CELL_TAG && el.tagName !== _const.HEADER_TAG) {\n                el = el.parentNode;\n            }\n\n            this.sort(SortableTable.msie ? SortableTable.getCellIndex(el) : el.cellIndex);\n        };\n\n        /**\n         * Overrides getCellIndex IE returns wrong cellIndex when columns are\n         * hidden\n         * @param  {Object} oTd TD element\n         * @return {Number}     Cell index\n         */\n        SortableTable.getCellIndex = function (oTd) {\n            var cells = oTd.parentNode.cells,\n                l = cells.length,\n                i = void 0;\n            for (i = 0; cells[i] !== oTd && i < l; i++) {}\n            return i;\n        };\n\n        /**\n         * Overrides initHeader in order to handle filters row position\n         * @param  {Array} oSortTypes\n         */\n        SortableTable.prototype.initHeader = function (oSortTypes) {\n            var stt = this;\n            if (!stt.tHead) {\n                if (tf.gridLayout) {\n                    stt.tHead = tf.feature('gridLayout').headTbl.tHead;\n                } else {\n                    return;\n                }\n            }\n\n            stt.headersRow = tf.headersRow;\n            var cells = stt.tHead.rows[stt.headersRow].cells;\n            stt.sortTypes = oSortTypes || [];\n            var l = cells.length;\n            var img = void 0,\n                c = void 0;\n\n            for (var i = 0; i < l; i++) {\n                c = cells[i];\n                if (stt.sortTypes[i] !== null && stt.sortTypes[i] !== 'None') {\n                    c.style.cursor = 'pointer';\n                    img = (0, _dom.createElm)('img', ['src', adpt.imgPath + adpt.imgBlank]);\n                    c.appendChild(img);\n                    if (stt.sortTypes[i] !== null) {\n                        c.setAttribute('_sortType', stt.sortTypes[i]);\n                    }\n                    (0, _event.addEvt)(c, 'click', stt._headerOnclick);\n                } else {\n                    c.setAttribute('_sortType', oSortTypes[i]);\n                    c._sortType = 'None';\n                }\n            }\n            stt.updateHeaderArrows();\n        };\n\n        /**\n         * Overrides updateHeaderArrows in order to handle arrows indicators\n         */\n        SortableTable.prototype.updateHeaderArrows = function () {\n            var stt = this;\n            var cells = void 0,\n                l = void 0,\n                img = void 0;\n\n            // external headers\n            if (adpt.asyncSort && adpt.triggerIds.length > 0) {\n                var triggers = adpt.triggerIds;\n                cells = [];\n                l = triggers.length;\n                for (var j = 0; j < l; j++) {\n                    cells.push((0, _dom.elm)(triggers[j]));\n                }\n            } else {\n                if (!this.tHead) {\n                    return;\n                }\n                cells = stt.tHead.rows[stt.headersRow].cells;\n                l = cells.length;\n            }\n            for (var i = 0; i < l; i++) {\n                var cell = cells[i];\n                if (!cell) {\n                    continue;\n                }\n                var cellAttr = cell.getAttribute('_sortType');\n                if (cellAttr !== null && cellAttr !== 'None') {\n                    img = cell.lastChild || cell;\n                    if (img.nodeName.toLowerCase() !== 'img') {\n                        img = (0, _dom.createElm)('img', ['src', adpt.imgPath + adpt.imgBlank]);\n                        cell.appendChild(img);\n                    }\n                    if (i === stt.sortColumn) {\n                        img.className = adpt.imgClassName + ' ' + (this.descending ? adpt.imgDescClassName : adpt.imgAscClassName);\n                    } else {\n                        img.className = adpt.imgClassName;\n                    }\n                }\n            }\n        };\n\n        /**\n         * Overrides getRowValue for custom key value feature\n         * @param  {Object} oRow    Row element\n         * @param  {String} sType\n         * @param  {Number} nColumn\n         * @return {String}\n         */\n        SortableTable.prototype.getRowValue = function (oRow, sType, nColumn) {\n            var stt = this;\n            // if we have defined a custom getRowValue use that\n            var sortTypeInfo = stt._sortTypeInfo[sType];\n            if (sortTypeInfo && sortTypeInfo.getRowValue) {\n                return sortTypeInfo.getRowValue(oRow, nColumn);\n            }\n            var c = oRow.cells[nColumn];\n            var s = SortableTable.getInnerText(c);\n            return stt.getValueFromString(s, sType);\n        };\n\n        /**\n         * Overrides getInnerText in order to avoid Firefox unexpected sorting\n         * behaviour with untrimmed text elements\n         * @param  {Object} oNode DOM element\n         * @return {String}       DOM element inner text\n         */\n        SortableTable.getInnerText = function (oNode) {\n            if (!oNode) {\n                return;\n            }\n            if (oNode.getAttribute(adpt.customKey)) {\n                return oNode.getAttribute(adpt.customKey);\n            } else {\n                return (0, _dom.getText)(oNode);\n            }\n        };\n    };\n\n    /**\n     * Adds a sort type\n     */\n\n\n    AdapterSortableTable.prototype.addSortType = function addSortType() {\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n        }\n\n        // Extract the arguments\n        var id = args[0],\n            caster = args[1],\n            sorter = args[2];\n\n        SortableTable.prototype.addSortType(id, caster, sorter);\n    };\n\n    /**\n     * Sets the sort types on a column basis\n     * @private\n     */\n\n\n    AdapterSortableTable.prototype.setSortTypes = function setSortTypes() {\n        var _this3 = this;\n\n        var tf = this.tf,\n            sortTypes = this.sortTypes,\n            _sortTypes = [];\n\n        for (var i = 0; i < tf.nbCells; i++) {\n            var colType = void 0;\n            if (sortTypes[i]) {\n                colType = sortTypes[i];\n                if ((0, _types.isObj)(colType)) {\n                    if (colType.type === _const.DATE) {\n                        colType = this._addDateType(i, sortTypes);\n                    } else if (colType.type === _const.FORMATTED_NUMBER) {\n                        var decimal = colType.decimal || tf.decimalSeparator;\n                        colType = this._addNumberType(i, decimal);\n                    }\n                } else {\n                    colType = colType.toLowerCase();\n                    if (colType === _const.DATE) {\n                        colType = this._addDateType(i, sortTypes);\n                    } else if (colType === _const.FORMATTED_NUMBER || colType === _const.NUMBER) {\n                        colType = this._addNumberType(i, tf.decimalSeparator);\n                    } else if (colType === _const.NONE) {\n                        // TODO: normalise 'none' vs 'None'\n                        colType = 'None';\n                    }\n                }\n            } else {\n                colType = _const.STRING;\n            }\n            _sortTypes.push(colType);\n        }\n\n        //Public TF method to add sort type\n\n        //Custom sort types\n        this.addSortType('caseinsensitivestring', SortableTable.toUpperCase);\n        this.addSortType(_const.STRING);\n        this.addSortType(_const.IP_ADDRESS, ipAddress, sortIP);\n\n        this.stt = new SortableTable(tf.dom(), _sortTypes);\n\n        /*** external table headers adapter ***/\n        if (this.asyncSort && this.triggerIds.length > 0) {\n            (function () {\n                var triggers = _this3.triggerIds;\n                for (var j = 0; j < triggers.length; j++) {\n                    if (triggers[j] === null) {\n                        continue;\n                    }\n                    var trigger = (0, _dom.elm)(triggers[j]);\n                    if (trigger) {\n                        trigger.style.cursor = 'pointer';\n\n                        (0, _event.addEvt)(trigger, 'click', function (evt) {\n                            var elm = evt.target;\n                            if (!_this3.tf.sort) {\n                                return;\n                            }\n                            _this3.stt.asyncSort(triggers.indexOf(elm.id));\n                        });\n                        trigger.setAttribute('_sortType', _sortTypes[j]);\n                    }\n                }\n            })();\n        }\n    };\n\n    AdapterSortableTable.prototype._addDateType = function _addDateType(colIndex, types) {\n        var tf = this.tf;\n        var dateType = tf.feature('dateType');\n        var locale = dateType.getOptions(colIndex, types).locale || tf.locale;\n        var colType = _const.DATE + '-' + locale;\n\n        this.addSortType(colType, function (value) {\n            var parsedDate = dateType.parse(value, locale);\n            // Invalid date defaults to Wed Feb 04 -768 11:00:00\n            return isNaN(+parsedDate) ? new Date(-86400000000000) : parsedDate;\n        });\n        return colType;\n    };\n\n    AdapterSortableTable.prototype._addNumberType = function _addNumberType(colIndex, decimal) {\n        var colType = '' + _const.FORMATTED_NUMBER + (decimal === '.' ? '' : '-custom');\n\n        this.addSortType(colType, function (value) {\n            return (0, _number.parse)(value, decimal);\n        });\n        return colType;\n    };\n\n    /**\n     * Remove extension\n     */\n\n\n    AdapterSortableTable.prototype.destroy = function destroy() {\n        var _this4 = this;\n\n        if (!this.initialized) {\n            return;\n        }\n        var tf = this.tf;\n        this.emitter.off(['sort'], function (tf, colIdx, desc) {\n            return _this4.sortByColumnIndex(colIdx, desc);\n        });\n        this.sorted = false;\n        this.stt.destroy();\n\n        var ids = tf.getFiltersId();\n        for (var idx = 0; idx < ids.length; idx++) {\n            var header = tf.getHeaderElement(idx);\n            var img = (0, _dom.tag)(header, 'img');\n\n            if (img.length === 1) {\n                header.removeChild(img[0]);\n            }\n        }\n        this.initialized = false;\n    };\n\n    return AdapterSortableTable;\n}(_feature.Feature);\n\n//Converters\n\n\nexports.default = AdapterSortableTable;\nfunction ipAddress(value) {\n    var vals = value.split('.');\n    for (var x in vals) {\n        var val = vals[x];\n        while (3 > val.length) {\n            val = '0' + val;\n        }\n        vals[x] = val;\n    }\n    return vals.join('.');\n}\n\nfunction sortIP(a, b) {\n    var aa = ipAddress(a.value.toLowerCase());\n    var bb = ipAddress(b.value.toLowerCase());\n    if (aa === bb) {\n        return 0;\n    } else if (aa < bb) {\n        return -1;\n    } else {\n        return 1;\n    }\n}\n\n/***/ }),\n\n/***/ 440:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _adapterEzEditTable = __webpack_require__(438);\n\nvar _adapterEzEditTable2 = _interopRequireDefault(_adapterEzEditTable);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _adapterEzEditTable2.default;\n\n/***/ }),\n\n/***/ 441:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _feature = __webpack_require__(9);\n\nvar _dom = __webpack_require__(8);\n\nvar _types = __webpack_require__(10);\n\nvar _sort = __webpack_require__(66);\n\nvar _const = __webpack_require__(15);\n\nvar _formatNumber = __webpack_require__(445);\n\nvar _formatNumber2 = _interopRequireDefault(_formatNumber);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar EVENTS = ['after-filtering', 'after-page-change', 'after-page-length-change'];\n\nvar SUM = 'sum';\nvar MEAN = 'mean';\nvar MIN = 'min';\nvar MAX = 'max';\nvar MEDIAN = 'median';\nvar Q1 = 'q1';\nvar Q3 = 'q3';\n\n/**\n * Column calculations extension\n */\n\nvar ColOps = function (_Feature) {\n    _inherits(ColOps, _Feature);\n\n    /**\n     * Creates an instance of ColOps\n     *\n     * @param {TableFilter} tf TableFilter instance\n     * @param {Object} opts Configuration object\n     */\n    function ColOps(tf, opts) {\n        _classCallCheck(this, ColOps);\n\n        /**\n         * Callback fired before columns operations start\n         * @type {Function}\n         */\n        var _this = _possibleConstructorReturn(this, _Feature.call(this, tf, opts.name));\n\n        _this.onBeforeOperation = (0, _types.isFn)(opts.on_before_operation) ? opts.on_before_operation : _types.EMPTY_FN;\n\n        /**\n         * Callback fired after columns operations are completed\n         * @type {Function}\n         */\n        _this.onAfterOperation = (0, _types.isFn)(opts.on_after_operation) ? opts.on_after_operation : _types.EMPTY_FN;\n\n        /**\n         * Configuration options\n         * @type {Object}\n         */\n        _this.opts = opts;\n\n        /**\n         * List of DOM element IDs containing column's calculation result\n         * @type {Array}\n         */\n        _this.labelIds = opts.id || [];\n\n        /**\n         * List of columns' indexes for calculations\n         * @type {Array}\n         */\n        _this.colIndexes = opts.col || [];\n\n        /**\n         * List of operations - possible values: 'sum', 'mean', 'min', 'max',\n         * 'median', 'q1', 'q3'\n         * @type {Array}\n         */\n        _this.operations = opts.operation || [];\n\n        /**\n         * List of write methods used to write the result - possible values:\n         * 'innerHTML', 'setValue', 'createTextNode'\n         * @type {Array}\n         */\n        _this.outputTypes = opts.write_method || [];\n\n        /**\n         * List of format objects used for formatting the result -\n         * refer to https://github.com/componitable/format-number to check\n         * configuration options\n         * @type {Array}\n         */\n        _this.formatResults = opts.format_result || [];\n\n        /**\n         * List of row indexes displaying the results\n         * @type {Array}\n         */\n        _this.totRowIndexes = opts.tot_row_index || [];\n\n        /**\n         * List of row indexes excluded from calculations\n         * @type {Array}\n         */\n        _this.excludeRows = opts.exclude_row || [];\n\n        /**\n         * List of decimal precision for calculation results\n         * @type {Array}\n         */\n        _this.decimalPrecisions = (0, _types.isUndef)(opts.decimal_precision) ? 2 : opts.decimal_precision;\n\n        _this.enable();\n        return _this;\n    }\n\n    /**\n     * Initializes ColOps instance\n     */\n\n\n    ColOps.prototype.init = function init() {\n        var _this2 = this;\n\n        if (this.initialized) {\n            return;\n        }\n        // subscribe to events\n        this.emitter.on(EVENTS, function () {\n            return _this2.calcAll();\n        });\n\n        this.calcAll();\n\n        /** @inherited */\n        this.initialized = true;\n    };\n\n    /**\n     * Calculates columns' values\n     * Configuration options are stored in 'opts' property\n     * - 'id' contains ids of elements showing result (array)\n     * - 'col' contains the columns' indexes (array)\n     * - 'operation' contains operation type (array, values: 'sum', 'mean',\n     *   'min', 'max', 'median', 'q1', 'q3')\n     * - 'write_method' array defines which method to use for displaying the\n     *    result (innerHTML, setValue, createTextNode) - default: 'innerHTML'\n     * - 'tot_row_index' defines in which row results are displayed\n     *   (integers array)\n     *\n     * - changes made by Nuovella:\n     * (1) optimized the routine (now it will only process each column once),\n     * (2) added calculations for the median, lower and upper quartile.\n     */\n\n\n    ColOps.prototype.calcAll = function calcAll() {\n        var tf = this.tf;\n        if (!tf.isInitialized()) {\n            return;\n        }\n\n        this.onBeforeOperation(tf, this);\n        this.emitter.emit('before-column-operation', tf, this);\n\n        var colIndexes = this.colIndexes,\n            colOperations = this.operations,\n            outputTypes = this.outputTypes,\n            totRowIndexes = this.totRowIndexes,\n            excludeRows = this.excludeRows,\n            formatResults = this.formatResults;\n\n        var decimalPrecisions = (0, _types.isUndef)(this.decimalPrecisions) ? 2 : this.decimalPrecisions;\n\n        //nuovella: determine unique list of columns to operate on\n        var uIndexes = [];\n        colIndexes.forEach(function (val) {\n            if (uIndexes.indexOf(val) === -1) {\n                uIndexes.push(val);\n            }\n        });\n\n        var nbCols = uIndexes.length,\n            rows = tf.dom().rows,\n            colValues = [];\n\n        for (var u = 0; u < nbCols; u++) {\n            //this retrieves col values\n            //use uIndexes because we only want to pass through this loop\n            //once for each column get the values in this unique column\n            colValues.push(tf.getVisibleColumnData(uIndexes[u], false, excludeRows));\n\n            var curValues = colValues[u];\n\n            //next: calculate all operations for this column\n            var result = 0,\n                operations = [],\n                precisions = [],\n                labels = [],\n                writeType = void 0,\n                formatResult = [],\n                idx = 0;\n\n            for (var k = 0; k < colIndexes.length; k++) {\n                if (colIndexes[k] !== uIndexes[u]) {\n                    continue;\n                }\n                operations[idx] = (colOperations[k] || 'sum').toLowerCase();\n                precisions[idx] = decimalPrecisions[k];\n                labels[idx] = this.labelIds[k];\n                writeType = (0, _types.isArray)(outputTypes) ? outputTypes[k] : null;\n                formatResult[idx] = this.configureFormat(uIndexes[u], formatResults[k]);\n                idx++;\n            }\n\n            for (var i = 0; i < idx; i++) {\n                // emit values before column calculation\n                this.emitter.emit('before-column-calc', tf, this, uIndexes[u], curValues, operations[i], precisions[i]);\n\n                result = Number(this.calc(curValues, operations[i], null));\n\n                // emit column calculation result\n                this.emitter.emit('column-calc', tf, this, uIndexes[u], result, operations[i], precisions[i]);\n\n                // write result in expected DOM element\n                this.writeResult(result, labels[i], writeType, precisions[i], formatResult[i]);\n            } //for i\n\n            // row(s) with result are always visible\n            var totRow = totRowIndexes && totRowIndexes[u] ? rows[totRowIndexes[u]] : null;\n            if (totRow) {\n                totRow.style.display = '';\n            }\n        } //for u\n\n        this.onAfterOperation(tf, this);\n        this.emitter.emit('after-column-operation', tf, this);\n    };\n\n    /**\n     * Make desired calculation on specified column.\n     * @param {Number} colIndex Column index\n     * @param {String} [operation=SUM] Operation type\n     * @param {Number} precision Decimal precision\n     * @returns {Number}\n     */\n\n\n    ColOps.prototype.columnCalc = function columnCalc(colIndex) {\n        var operation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SUM;\n        var precision = arguments[2];\n\n        var excludeRows = this.excludeRows || [];\n        var colValues = tf.getVisibleColumnData(colIndex, false, excludeRows);\n\n        return Number(this.calc(colValues, operation, precision));\n    };\n\n    /**\n     * Make calculation on passed values.\n     * @param {Array} values List of values\n     * @param {String} [operation=SUM] Optional operation type\n     * @param {Number} precision Optional result precision\n     * @returns {Number}\n     * @private\n     */\n\n\n    ColOps.prototype.calc = function calc(colValues) {\n        var operation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SUM;\n        var precision = arguments[2];\n\n        var result = 0;\n\n        if (operation === Q1 || operation === Q3 || operation === MEDIAN) {\n            colValues = this.sortColumnValues(colValues, _sort.numSortAsc);\n        }\n\n        switch (operation) {\n            case MEAN:\n                result = this.calcMean(colValues);\n                break;\n            case SUM:\n                result = this.calcSum(colValues);\n                break;\n            case MIN:\n                result = this.calcMin(colValues);\n                break;\n            case MAX:\n                result = this.calcMax(colValues);\n                break;\n            case MEDIAN:\n                result = this.calcMedian(colValues);\n                break;\n            case Q1:\n                result = this.calcQ1(colValues);\n                break;\n            case Q3:\n                result = this.calcQ3(colValues);\n                break;\n        }\n\n        return (0, _types.isEmpty)(precision) ? result : result.toFixed(precision);\n    };\n\n    /**\n     * Calculate the sum of passed values.\n     * @param {Array} [values=[]] List of values\n     * @returns {Number}\n     */\n\n\n    ColOps.prototype.calcSum = function calcSum() {\n        var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n        if ((0, _types.isEmpty)(values)) {\n            return 0;\n        }\n        var result = values.reduce(function (x, y) {\n            return Number(x) + Number(y);\n        });\n        return result;\n    };\n\n    /**\n     * Calculate the mean of passed values.\n     * @param {Array} [values=[]] List of values\n     * @returns {Number}\n     */\n\n\n    ColOps.prototype.calcMean = function calcMean() {\n        var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n        var result = this.calcSum(values) / values.length;\n        return Number(result);\n    };\n\n    /**\n     * Calculate the max value of passed values.\n     * @param {Array} [values=[]] List of values\n     * @returns {Number}\n     */\n\n\n    ColOps.prototype.calcMax = function calcMax() {\n        var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n        return Math.max.apply(null, values);\n    };\n\n    /**\n     * Calculate the min value of passed values.\n     * @param {Array} [values=[]] List of values\n     * @returns {Number}\n     */\n\n\n    ColOps.prototype.calcMin = function calcMin() {\n        var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n        return Math.min.apply(null, values);\n    };\n\n    /**\n     * Calculate the median of passed values.\n     * @param {Array} [values=[]] List of values\n     * @returns {Number}\n     */\n\n\n    ColOps.prototype.calcMedian = function calcMedian() {\n        var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n        var nbValues = values.length;\n        var aux = 0;\n        if (nbValues % 2 === 1) {\n            aux = Math.floor(nbValues / 2);\n            return Number(values[aux]);\n        }\n        return (Number(values[nbValues / 2]) + Number(values[nbValues / 2 - 1])) / 2;\n    };\n\n    /**\n     * Calculate the lower quartile of passed values.\n     * @param {Array} [values=[]] List of values\n     * @returns {Number}\n     */\n\n\n    ColOps.prototype.calcQ1 = function calcQ1() {\n        var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n        var nbValues = values.length;\n        var posa = 0.0;\n        posa = Math.floor(nbValues / 4);\n        if (4 * posa === nbValues) {\n            return (Number(values[posa - 1]) + Number(values[posa])) / 2;\n        }\n        return Number(values[posa]);\n    };\n\n    /**\n     * Calculate the upper quartile of passed values.\n     * @param {Array} [values=[]] List of values\n     * @returns {Number}\n     */\n\n\n    ColOps.prototype.calcQ3 = function calcQ3() {\n        var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n        var nbValues = values.length;\n        var posa = 0.0;\n        var posb = 0.0;\n        posa = Math.floor(nbValues / 4);\n        if (4 * posa === nbValues) {\n            posb = 3 * posa;\n            return (Number(values[posb]) + Number(values[posb - 1])) / 2;\n        }\n        return Number(values[nbValues - posa - 1]);\n    };\n\n    /**\n     * Sort passed values with supplied sorter function.\n     * @param {Array} [values=[]] List of values to be sorted\n     * @param {Function} sorter Sorter function\n     * @returns {Array}\n     */\n\n\n    ColOps.prototype.sortColumnValues = function sortColumnValues() {\n        var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        var sorter = arguments[1];\n\n        return values.sort(sorter);\n    };\n\n    /**\n     * Write calculation result in passed DOM element with supplied write method\n     * and decimal precision.\n     * @param {Number} [result=0] Calculation result\n     * @param {DOMElement} label DOM element\n     * @param {String} [writeType='innerhtml'] Write method\n     * @param {Number} [precision=2] Applied decimal precision\n     * @private\n     */\n\n\n    ColOps.prototype.writeResult = function writeResult() {\n        var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var label = arguments[1];\n        var writeType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'innerhtml';\n        var precision = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2;\n        var format = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n\n        var labelElm = (0, _dom.elm)(label);\n\n        if (!labelElm) {\n            return;\n        }\n\n        result = result.toFixed(precision);\n        if (isNaN(result) || !isFinite(result)) {\n            result = '';\n        } else {\n            result = (0, _formatNumber2.default)(format)(result);\n        }\n\n        switch (writeType.toLowerCase()) {\n            case 'innerhtml':\n                labelElm.innerHTML = result;\n                break;\n            case 'setvalue':\n                labelElm.value = result;\n                break;\n            case 'createtextnode':\n                var oldNode = labelElm.firstChild;\n                var txtNode = (0, _dom.createText)(result);\n                labelElm.replaceChild(txtNode, oldNode);\n                break;\n        }\n    };\n\n    /**\n     * Configure the format options used to format the operation result based\n     * on column type.\n     * @param {Number} colIndex Column index\n     * @param {Object} [format={}] Format object\n     * @returns {Object}\n     * @private\n     */\n\n\n    ColOps.prototype.configureFormat = function configureFormat(colIndex) {\n        var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        var tf = this.tf;\n        if (tf.hasType(colIndex, [_const.FORMATTED_NUMBER])) {\n            var colType = tf.colTypes[colIndex];\n            if (colType.decimal && !format.decimal) {\n                format.decimal = colType.decimal;\n            }\n            if (colType.thousands && !format.integerSeparator) {\n                format.integerSeparator = colType.thousands;\n            }\n        } else {\n            format.decimal = format.decimal || '';\n            format.integerSeparator = format.integerSeparator || '';\n        }\n        return format;\n    };\n\n    /** Remove extension */\n\n\n    ColOps.prototype.destroy = function destroy() {\n        var _this3 = this;\n\n        if (!this.initialized) {\n            return;\n        }\n        // unsubscribe to events\n        this.emitter.off(EVENTS, function () {\n            return _this3.calcAll();\n        });\n\n        this.initialized = false;\n    };\n\n    return ColOps;\n}(_feature.Feature);\n\nexports.default = ColOps;\n\n/***/ }),\n\n/***/ 442:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _feature = __webpack_require__(9);\n\nvar _dom = __webpack_require__(8);\n\nvar _types = __webpack_require__(10);\n\nvar _event = __webpack_require__(17);\n\nvar _root = __webpack_require__(14);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * Columns Visibility extension\n */\nvar ColsVisibility = function (_Feature) {\n    _inherits(ColsVisibility, _Feature);\n\n    /**\n     * Creates an instance of ColsVisibility\n     * @param {TableFilter} tf TableFilter instance\n     * @param {Object} Configuration object\n     */\n    function ColsVisibility(tf, f) {\n        _classCallCheck(this, ColsVisibility);\n\n        // Configuration object\n        var _this = _possibleConstructorReturn(this, _Feature.call(this, tf, f.name));\n\n        var cfg = _this.config;\n\n        /**\n         * Module name\n         * @type {String}\n         */\n        _this.name = f.name;\n\n        /**\n         * Module description\n         * @type {String}\n         */\n        _this.desc = f.description || 'Columns visibility manager';\n\n        /**\n         * show/hide columns container element\n         * @private\n         */\n        _this.spanEl = null;\n\n        /**\n         * show/hide columns button element\n         * @private\n         */\n        _this.btnEl = null;\n\n        /**\n         * show/hide columns main container element\n         * @private\n         */\n        _this.contEl = null;\n\n        /**\n         * Enable tick to hide a column, defaults to true\n         * @type {Boolean}\n         */\n        _this.tickToHide = f.tick_to_hide === false ? false : true;\n\n        /**\n         * Enable columns manager UI, defaults to true\n         * @type {Boolean}\n         */\n        _this.manager = f.manager === false ? false : true;\n\n        /**\n         * Headers HTML table reference only if headers are external\n         * @type {DOMElement}\n         */\n        _this.headersTbl = f.headers_table || null;\n\n        /**\n         * Headers row index only if headers are external\n         * @type {Number}\n         */\n        _this.headersIndex = f.headers_index || 1;\n\n        /**\n         * ID of main container element\n         * @type {String}\n         */\n        _this.contElTgtId = f.container_target_id || null;\n\n        /**\n         * Alternative text for column headers in column manager UI\n         * @type {Array}\n         */\n        _this.headersText = f.headers_text || null;\n\n        /**\n         * ID of button's container element\n         * @type {String}\n         */\n        _this.btnTgtId = f.btn_target_id || null;\n\n        /**\n         * Button's text, defaults to Columns&#9660;\n         * @type {String}\n         */\n        _this.btnText = f.btn_text || 'Columns&#9660;';\n\n        /**\n         * Button's inner HTML\n         * @type {String}\n         */\n        _this.btnHtml = f.btn_html || null;\n\n        /**\n         * Css class for button\n         * @type {String}\n         */\n        _this.btnCssClass = f.btn_css_class || 'colVis';\n\n        /**\n         * Columns manager UI close link text, defaults to 'Close'\n         * @type {String}\n         */\n        _this.btnCloseText = f.btn_close_text || 'Close';\n\n        /**\n         * Columns manager UI close link HTML\n         * @type {String}\n         */\n        _this.btnCloseHtml = f.btn_close_html || null;\n\n        /**\n         * Css for columns manager UI close link\n         * @type {String}\n         */\n        _this.btnCloseCssClass = f.btn_close_css_class || _this.btnCssClass;\n\n        /**\n         * Extension's stylesheet filename\n         * @type {String}\n         */\n        _this.stylesheet = f.stylesheet || 'colsVisibility.css';\n\n        /**\n         * Css for columns manager UI span\n         * @type {String}\n         */\n        _this.spanCssClass = f.span_css_class || 'colVisSpan';\n\n        /**\n         * Css for columns manager UI main container\n         * @type {String}\n         */\n        _this.contCssClass = f.cont_css_class || 'colVisCont';\n\n        /**\n         * Css for columns manager UI checklist (ul)\n         * @type {String}\n         */\n        _this.listCssClass = cfg.list_css_class || 'cols_checklist';\n\n        /**\n         * Css for columns manager UI checklist item (li)\n         * @type {String}\n         */\n        _this.listItemCssClass = cfg.checklist_item_css_class || 'cols_checklist_item';\n\n        /**\n         * Css for columns manager UI checklist item selected state (li)\n         * @type {String}\n         */\n        _this.listSlcItemCssClass = cfg.checklist_selected_item_css_class || 'cols_checklist_slc_item';\n\n        /**\n         * Text preceding the columns list, defaults to 'Hide' or 'Show'\n         * depending on tick mode (tick_to_hide option)\n         * @type {String}\n         */\n        _this.text = f.text || (_this.tickToHide ? 'Hide: ' : 'Show: ');\n\n        /**\n         * List of columns indexes to be hidden at initialization\n         * @type {Array}\n         */\n        _this.atStart = f.at_start || [];\n\n        /**\n         * Enable hover behaviour on columns manager button/link\n         * @type {Boolean}\n         */\n        _this.enableHover = Boolean(f.enable_hover);\n\n        /**\n         * Enable select all option, disabled by default\n         * @type {Boolean}\n         */\n        _this.enableTickAll = Boolean(f.enable_tick_all);\n\n        /**\n         * Text for select all option, defaults to 'Select all:'\n         * @type {String}\n         */\n        _this.tickAllText = f.tick_all_text || 'Select all:';\n\n        /**\n         * List of indexes of hidden columns\n         * @private\n         */\n        _this.hiddenCols = [];\n\n        /**\n         * Bound mouseup wrapper\n         * @private\n         */\n        _this.boundMouseup = null;\n\n        /**\n         * Callback fired when the extension is initialized\n         * @type {Function}\n         */\n        _this.onLoaded = (0, _types.isFn)(f.on_loaded) ? f.on_loaded : _types.EMPTY_FN;\n\n        /**\n         * Callback fired before the columns manager is opened\n         * @type {Function}\n         */\n        _this.onBeforeOpen = (0, _types.isFn)(f.on_before_open) ? f.on_before_open : _types.EMPTY_FN;\n\n        /**\n         * Callback fired after the columns manager is opened\n         * @type {Function}\n         */\n        _this.onAfterOpen = (0, _types.isFn)(f.on_after_open) ? f.on_after_open : _types.EMPTY_FN;\n\n        /**\n         * Callback fired before the columns manager is closed\n         * @type {Function}\n         */\n        _this.onBeforeClose = (0, _types.isFn)(f.on_before_close) ? f.on_before_close : _types.EMPTY_FN;\n\n        /**\n         * Callback fired after the columns manager is closed\n         * @type {Function}\n         */\n        _this.onAfterClose = (0, _types.isFn)(f.on_after_close) ? f.on_after_close : _types.EMPTY_FN;\n\n        /**\n         * Callback fired before a column is hidden\n         * @type {Function}\n         */\n        _this.onBeforeColHidden = (0, _types.isFn)(f.on_before_col_hidden) ? f.on_before_col_hidden : _types.EMPTY_FN;\n\n        /**\n         * Callback fired after a column is hidden\n         * @type {Function}\n         */\n        _this.onAfterColHidden = (0, _types.isFn)(f.on_after_col_hidden) ? f.on_after_col_hidden : _types.EMPTY_FN;\n\n        /**\n         * Callback fired before a column is displayed\n         * @type {Function}\n         */\n        _this.onBeforeColDisplayed = (0, _types.isFn)(f.on_before_col_displayed) ? f.on_before_col_displayed : _types.EMPTY_FN;\n\n        /**\n         * Callback fired after a column is displayed\n         * @type {Function}\n         */\n        _this.onAfterColDisplayed = (0, _types.isFn)(f.on_after_col_displayed) ? f.on_after_col_displayed : _types.EMPTY_FN;\n\n        //Grid layout support\n        if (tf.gridLayout) {\n            _this.headersTbl = tf.feature('gridLayout').headTbl; //headers table\n            _this.headersIndex = 0; //headers index\n            _this.onAfterColDisplayed = function () {};\n            _this.onAfterColHidden = function () {};\n        }\n\n        //Loads extension stylesheet\n        tf.import(f.name + 'Style', tf.stylePath + _this.stylesheet, null, 'link');\n\n        _this.enable();\n        return _this;\n    }\n\n    /**\n     * Mouse-up event handler handling popup auto-close behaviour\n     * @private\n     */\n\n\n    ColsVisibility.prototype.onMouseup = function onMouseup(evt) {\n        var targetElm = (0, _event.targetEvt)(evt);\n\n        while (targetElm && targetElm !== this.contEl && targetElm !== this.btnEl) {\n            targetElm = targetElm.parentNode;\n        }\n\n        if (targetElm !== this.contEl && targetElm !== this.btnEl) {\n            this.toggle();\n        }\n\n        return;\n    };\n\n    /**\n     * Toggle columns manager UI\n     */\n\n\n    ColsVisibility.prototype.toggle = function toggle() {\n        // ensure mouseup event handler is removed\n        (0, _event.removeEvt)(_root.root, 'mouseup', this.boundMouseup);\n\n        var contDisplay = this.contEl.style.display;\n\n        if (contDisplay !== 'inline') {\n            this.onBeforeOpen(this);\n        }\n        if (contDisplay === 'inline') {\n            this.onBeforeClose(this);\n        }\n\n        this.contEl.style.display = contDisplay === 'inline' ? 'none' : 'inline';\n\n        if (contDisplay !== 'inline') {\n            this.onAfterOpen(this);\n            (0, _event.addEvt)(_root.root, 'mouseup', this.boundMouseup);\n        }\n        if (contDisplay === 'inline') {\n            this.onAfterClose(this);\n        }\n    };\n\n    /**\n     * Check an item in columns manager UI\n     * @private\n     */\n\n\n    ColsVisibility.prototype.checkItem = function checkItem(lbl) {\n        var li = lbl.parentNode;\n        if (!li || !lbl) {\n            return;\n        }\n        var isChecked = lbl.firstChild.checked;\n        var colIndex = lbl.firstChild.getAttribute('id').split('_')[1];\n        colIndex = parseInt(colIndex, 10);\n        if (isChecked) {\n            (0, _dom.addClass)(li, this.listSlcItemCssClass);\n        } else {\n            (0, _dom.removeClass)(li, this.listSlcItemCssClass);\n        }\n\n        var hide = false;\n        if (this.tickToHide && isChecked || !this.tickToHide && !isChecked) {\n            hide = true;\n        }\n        this.setHidden(colIndex, hide);\n    };\n\n    /**\n     * Initializes ColsVisibility instance\n     */\n\n\n    ColsVisibility.prototype.init = function init() {\n        var _this2 = this;\n\n        if (this.initialized || !this.manager) {\n            return;\n        }\n\n        this.emitter.on(['hide-column'], function (tf, colIndex) {\n            return _this2.hideCol(colIndex);\n        });\n\n        this.buildBtn();\n        this.buildManager();\n\n        /** @inherited */\n        this.initialized = true;\n\n        this.boundMouseup = this.onMouseup.bind(this);\n\n        this.emitter.emit('columns-visibility-initialized', this.tf, this);\n\n        // Hide columns at start at very end of initialization, do not move\n        // as order is important\n        this._hideAtStart();\n    };\n\n    /**\n     * Build main button UI\n     */\n\n\n    ColsVisibility.prototype.buildBtn = function buildBtn() {\n        var _this3 = this;\n\n        if (this.btnEl) {\n            return;\n        }\n        var tf = this.tf;\n        var span = (0, _dom.createElm)('span');\n        span.className = this.spanCssClass;\n\n        //Container element (rdiv or custom element)\n        if (!this.btnTgtId) {\n            tf.setToolbar();\n        }\n        var targetEl = !this.btnTgtId ? tf.rDiv : (0, _dom.elm)(this.btnTgtId);\n\n        if (!this.btnTgtId) {\n            var firstChild = targetEl.firstChild;\n            firstChild.parentNode.insertBefore(span, firstChild);\n        } else {\n            targetEl.appendChild(span);\n        }\n\n        if (!this.btnHtml) {\n            var btn = (0, _dom.createElm)('a', ['href', 'javascript:;']);\n            btn.className = this.btnCssClass;\n            btn.title = this.desc;\n\n            btn.innerHTML = this.btnText;\n            span.appendChild(btn);\n            if (!this.enableHover) {\n                (0, _event.addEvt)(btn, 'click', function (evt) {\n                    return _this3.toggle(evt);\n                });\n            } else {\n                (0, _event.addEvt)(btn, 'mouseover', function (evt) {\n                    return _this3.toggle(evt);\n                });\n            }\n        } else {\n            //Custom html\n            span.innerHTML = this.btnHtml;\n            var colVisEl = span.firstChild;\n            if (!this.enableHover) {\n                (0, _event.addEvt)(colVisEl, 'click', function (evt) {\n                    return _this3.toggle(evt);\n                });\n            } else {\n                (0, _event.addEvt)(colVisEl, 'mouseover', function (evt) {\n                    return _this3.toggle(evt);\n                });\n            }\n        }\n\n        this.spanEl = span;\n        this.btnEl = this.spanEl.firstChild;\n\n        this.onLoaded(this);\n    };\n\n    /**\n     * Build columns manager UI\n     */\n\n\n    ColsVisibility.prototype.buildManager = function buildManager() {\n        var _this4 = this;\n\n        var tf = this.tf;\n\n        var container = !this.contElTgtId ? (0, _dom.createElm)('div') : (0, _dom.elm)(this.contElTgtId);\n        container.className = this.contCssClass;\n\n        //Extension description\n        var extNameLabel = (0, _dom.createElm)('p');\n        extNameLabel.innerHTML = this.text;\n        container.appendChild(extNameLabel);\n\n        //Headers list\n        var ul = (0, _dom.createElm)('ul');\n        ul.className = this.listCssClass;\n\n        var tbl = this.headersTbl ? this.headersTbl : tf.dom();\n        var headerIndex = this.headersTbl ? this.headersIndex : tf.getHeadersRowIndex();\n        var headerRow = tbl.rows[headerIndex];\n\n        //Tick all option\n        if (this.enableTickAll) {\n            var li = (0, _dom.createCheckItem)('col__' + tf.id, this.tickAllText, this.tickAllText);\n            (0, _dom.addClass)(li, this.listItemCssClass);\n            ul.appendChild(li);\n            li.check.checked = !this.tickToHide;\n\n            (0, _event.addEvt)(li.check, 'click', function () {\n                for (var h = 0; h < headerRow.cells.length; h++) {\n                    var itm = (0, _dom.elm)('col_' + h + '_' + tf.id);\n                    if (itm && li.check.checked !== itm.checked) {\n                        itm.click();\n                        itm.checked = li.check.checked;\n                    }\n                }\n            });\n        }\n\n        for (var i = 0; i < headerRow.cells.length; i++) {\n            var cell = headerRow.cells[i];\n            var cellText = this.headersText && this.headersText[i] ? this.headersText[i] : this._getHeaderText(cell);\n            var liElm = (0, _dom.createCheckItem)('col_' + i + '_' + tf.id, cellText, cellText);\n            (0, _dom.addClass)(liElm, this.listItemCssClass);\n            if (!this.tickToHide) {\n                (0, _dom.addClass)(liElm, this.listSlcItemCssClass);\n            }\n            ul.appendChild(liElm);\n            if (!this.tickToHide) {\n                liElm.check.checked = true;\n            }\n\n            (0, _event.addEvt)(liElm.check, 'click', function (evt) {\n                var elm = (0, _event.targetEvt)(evt);\n                var lbl = elm.parentNode;\n                _this4.checkItem(lbl);\n            });\n        }\n\n        //separator\n        var p = (0, _dom.createElm)('p', ['align', 'center']);\n        var btn = void 0;\n        //Close link\n        if (!this.btnCloseHtml) {\n            btn = (0, _dom.createElm)('a', ['href', 'javascript:;']);\n            btn.className = this.btnCloseCssClass;\n            btn.innerHTML = this.btnCloseText;\n            (0, _event.addEvt)(btn, 'click', function (evt) {\n                return _this4.toggle(evt);\n            });\n            p.appendChild(btn);\n        } else {\n            p.innerHTML = this.btnCloseHtml;\n            btn = p.firstChild;\n            (0, _event.addEvt)(btn, 'click', function (evt) {\n                return _this4.toggle(evt);\n            });\n        }\n\n        container.appendChild(ul);\n        container.appendChild(p);\n\n        this.btnEl.parentNode.insertBefore(container, this.btnEl);\n        this.contEl = container;\n    };\n\n    /**\n     * Hide or show specified columns\n     * @param {Number} colIndex Column index\n     * @param {Boolean} hide    Hide column if true or show if false\n     */\n\n\n    ColsVisibility.prototype.setHidden = function setHidden(colIndex, hide) {\n        var tf = this.tf;\n        var tbl = tf.dom();\n\n        if (hide) {\n            this.onBeforeColHidden(this, colIndex);\n        }\n        if (!hide) {\n            this.onBeforeColDisplayed(this, colIndex);\n        }\n\n        this._hideCells(tbl, colIndex, hide);\n        if (this.headersTbl) {\n            this._hideCells(this.headersTbl, colIndex, hide);\n        }\n\n        var hiddenCols = this.hiddenCols;\n        var itemIndex = hiddenCols.indexOf(colIndex);\n        if (hide) {\n            if (itemIndex === -1) {\n                this.hiddenCols.push(colIndex);\n            }\n        } else {\n            if (itemIndex !== -1) {\n                this.hiddenCols.splice(itemIndex, 1);\n            }\n        }\n\n        var gridLayout = void 0;\n        var headTbl = void 0;\n        var gridColElms = void 0;\n        if (hide) {\n            //This event is fired just after a column is displayed for\n            //grid_layout support\n            //TODO: grid layout module should be responsible for those\n            //calculations\n            if (tf.gridLayout) {\n                gridLayout = tf.feature('gridLayout');\n                headTbl = gridLayout.headTbl;\n                gridColElms = gridLayout.colElms;\n                var hiddenWidth = parseInt(gridColElms[colIndex].style.width, 10);\n\n                var headTblW = parseInt(headTbl.style.width, 10);\n                headTbl.style.width = headTblW - hiddenWidth + 'px';\n                tbl.style.width = headTbl.style.width;\n            }\n\n            this.onAfterColHidden(this, colIndex);\n            this.emitter.emit('column-hidden', tf, this, colIndex, this.hiddenCols);\n        }\n\n        if (!hide) {\n            //This event is fired just after a column is displayed for\n            //grid_layout support\n            //TODO: grid layout module should be responsible for those\n            //calculations\n            if (tf.gridLayout) {\n                gridLayout = tf.feature('gridLayout');\n                headTbl = gridLayout.headTbl;\n                gridColElms = gridLayout.colElms;\n                var width = parseInt(gridColElms[colIndex].style.width, 10);\n                headTbl.style.width = parseInt(headTbl.style.width, 10) + width + 'px';\n                tf.dom().style.width = headTbl.style.width;\n            }\n\n            this.onAfterColDisplayed(this, colIndex);\n            this.emitter.emit('column-shown', tf, this, colIndex, this.hiddenCols);\n        }\n    };\n\n    /**\n     * Show specified column\n     * @param  {Number} colIndex Column index\n     */\n\n\n    ColsVisibility.prototype.showCol = function showCol(colIndex) {\n        if (colIndex === undefined || !this.isColHidden(colIndex)) {\n            return;\n        }\n        if (this.manager && this.contEl) {\n            var itm = (0, _dom.elm)('col_' + colIndex + '_' + this.tf.id);\n            if (itm) {\n                itm.click();\n            }\n        } else {\n            this.setHidden(colIndex, false);\n        }\n    };\n\n    /**\n     * Hide specified column\n     * @param  {Number} colIndex Column index\n     */\n\n\n    ColsVisibility.prototype.hideCol = function hideCol(colIndex) {\n        if (colIndex === undefined || this.isColHidden(colIndex)) {\n            return;\n        }\n        if (this.manager && this.contEl) {\n            var itm = (0, _dom.elm)('col_' + colIndex + '_' + this.tf.id);\n            if (itm) {\n                itm.click();\n            }\n        } else {\n            this.setHidden(colIndex, true);\n        }\n    };\n\n    /**\n     * Determine if specified column is hidden\n     * @param  {Number} colIndex Column index\n     */\n\n\n    ColsVisibility.prototype.isColHidden = function isColHidden(colIndex) {\n        if (this.hiddenCols.indexOf(colIndex) !== -1) {\n            return true;\n        }\n        return false;\n    };\n\n    /**\n     * Toggle visibility of specified column\n     * @param  {Number} colIndex Column index\n     */\n\n\n    ColsVisibility.prototype.toggleCol = function toggleCol(colIndex) {\n        if (colIndex === undefined || this.isColHidden(colIndex)) {\n            this.showCol(colIndex);\n        } else {\n            this.hideCol(colIndex);\n        }\n    };\n\n    /**\n     * Return the indexes of the columns currently hidden\n     * @return {Array} column indexes\n     */\n\n\n    ColsVisibility.prototype.getHiddenCols = function getHiddenCols() {\n        return this.hiddenCols;\n    };\n\n    /**\n     * Remove the columns manager\n     */\n\n\n    ColsVisibility.prototype.destroy = function destroy() {\n        var _this5 = this;\n\n        if (!this.initialized) {\n            return;\n        }\n        if ((0, _dom.elm)(this.contElTgtId)) {\n            (0, _dom.elm)(this.contElTgtId).innerHTML = '';\n        } else {\n            this.contEl.innerHTML = '';\n            (0, _dom.removeElm)(this.contEl);\n            this.contEl = null;\n        }\n        this.btnEl.innerHTML = '';\n        (0, _dom.removeElm)(this.btnEl);\n        this.btnEl = null;\n\n        this.emitter.off(['hide-column'], function (tf, colIndex) {\n            return _this5.hideCol(colIndex);\n        });\n\n        this.boundMouseup = null;\n\n        this.initialized = false;\n    };\n\n    ColsVisibility.prototype._getHeaderText = function _getHeaderText(cell) {\n        if (!cell.hasChildNodes) {\n            return '';\n        }\n\n        for (var i = 0; i < cell.childNodes.length; i++) {\n            var n = cell.childNodes[i];\n            if (n.nodeType === 3) {\n                return n.nodeValue;\n            } else if (n.nodeType === 1) {\n                if (n.id && n.id.indexOf('popUp') !== -1) {\n                    continue;\n                } else {\n                    return (0, _dom.getText)(n);\n                }\n            }\n            continue;\n        }\n        return '';\n    };\n\n    ColsVisibility.prototype._hideCells = function _hideCells(tbl, colIndex, hide) {\n        for (var i = 0; i < tbl.rows.length; i++) {\n            var row = tbl.rows[i];\n            var cell = row.cells[colIndex];\n            if (cell) {\n                cell.style.display = hide ? 'none' : '';\n            }\n        }\n    };\n\n    ColsVisibility.prototype._hideAtStart = function _hideAtStart() {\n        var _this6 = this;\n\n        this.atStart.forEach(function (colIdx) {\n            _this6.hideCol(colIdx);\n        });\n    };\n\n    return ColsVisibility;\n}(_feature.Feature);\n\nexports.default = ColsVisibility;\n\n/***/ }),\n\n/***/ 443:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _feature = __webpack_require__(9);\n\nvar _dom = __webpack_require__(8);\n\nvar _types = __webpack_require__(10);\n\nvar _event = __webpack_require__(17);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * Filters Visibility extension\n */\nvar FiltersVisibility = function (_Feature) {\n  _inherits(FiltersVisibility, _Feature);\n\n  /**\n   * Creates an instance of FiltersVisibility\n   * @param {TableFilter} tf TableFilter instance\n   * @param {Object} Configuration object\n   */\n  function FiltersVisibility(tf, f) {\n    _classCallCheck(this, FiltersVisibility);\n\n    /**\n     * Module name\n     * @type {String}\n     */\n    var _this = _possibleConstructorReturn(this, _Feature.call(this, tf, f.name));\n\n    _this.name = f.name;\n\n    /**\n     * Module description\n     * @type {String}\n     */\n    _this.desc = f.description || 'Filters row visibility manager';\n\n    /**\n     * Extension's stylesheet filename\n     * @type {String}\n     */\n    _this.stylesheet = f.stylesheet || 'filtersVisibility.css';\n\n    /**\n     * Expand icon filename\n     * @type {String}\n     */\n    _this.icnExpand = f.expand_icon_name || 'icn_exp.png';\n\n    /**\n     * Collapse icon filename\n     * @type {String}\n     */\n    _this.icnCollapse = f.collapse_icon_name || 'icn_clp.png';\n\n    /**\n     * Main container element\n     * @private\n     */\n    _this.contEl = null;\n\n    /**\n     * Button element\n     * @private\n     */\n    _this.btnEl = null;\n\n    /**\n     * Expand icon HTML\n     * @private\n     */\n    _this.icnExpandHtml = '<img src=\"' + tf.themesPath + _this.icnExpand + '\" alt=\"Expand filters\" >';\n\n    /**\n     * Collapse icon HTML\n     * @private\n     */\n    _this.icnCollapseHtml = '<img src=\"' + tf.themesPath + _this.icnCollapse + '\" alt=\"Collapse filters\" >';\n\n    /**\n     * Default text\n     * @private\n     */\n    _this.defaultText = 'Toggle filters';\n\n    /**\n     * ID of main container element\n     * @type {String}\n     */\n    _this.targetId = f.target_id || null;\n\n    /**\n     * Enable expand/collapse icon, defaults to true\n     * @type {Boolean}\n     */\n    _this.enableIcon = f.enable_icon === false ? false : true;\n\n    /**\n     * Custom text for button\n     * @type {String}\n     */\n    _this.btnText = f.btn_text || '';\n\n    /**\n     * Collapse button HTML\n     * @private\n     */\n    _this.collapseBtnHtml = _this.enableIcon ? _this.icnCollapseHtml + _this.btnText : _this.btnText || _this.defaultText;\n\n    /**\n     * Expand button HTML\n     * @private\n     */\n    _this.expandBtnHtml = _this.enableIcon ? _this.icnExpandHtml + _this.btnText : _this.btnText || _this.defaultText;\n\n    /**\n     * Button's custom HTML\n     * @type {String}\n     */\n    _this.btnHtml = f.btn_html || null;\n\n    /**\n     * Css class for expand/collapse filters button\n     * @type {String}\n     */\n    _this.btnCssClass = f.btn_css_class || 'btnExpClpFlt';\n\n    /**\n     * Css class for main container\n     * @type {String}\n     */\n    _this.contCssClass = f.cont_css_class || 'expClpFlt';\n\n    /**\n     * Filters row index\n     * @type {Number}\n     */\n    _this.filtersRowIndex = !(0, _types.isUndef)(f.filters_row_index) ? f.filters_row_index : tf.getFiltersRowIndex();\n\n    /**\n     * Make filters visible at initialization, defaults to true\n     * @type {Boolean}\n     */\n    _this.visibleAtStart = !(0, _types.isUndef)(f.visible_at_start) ? Boolean(f.visible_at_start) : true;\n\n    /**\n     * Callback fired before filters row is shown\n     * @type {Function}\n     */\n    _this.onBeforeShow = (0, _types.isFn)(f.on_before_show) ? f.on_before_show : _types.EMPTY_FN;\n\n    /**\n     * Callback fired after filters row is shown\n     * @type {Function}\n     */\n    _this.onAfterShow = (0, _types.isFn)(f.on_after_show) ? f.on_after_show : _types.EMPTY_FN;\n\n    /**\n     * Callback fired before filters row is hidden\n     * @type {Function}\n     */\n    _this.onBeforeHide = (0, _types.isFn)(f.on_before_hide) ? f.on_before_hide : _types.EMPTY_FN;\n\n    /**\n     * Callback fired after filters row is hidden\n     * @type {Function}\n     */\n    _this.onAfterHide = (0, _types.isFn)(f.on_after_hide) ? f.on_after_hide : _types.EMPTY_FN;\n\n    //Import extension's stylesheet\n    tf.import(f.name + 'Style', tf.stylePath + _this.stylesheet, null, 'link');\n\n    _this.enable();\n    return _this;\n  }\n\n  /**\n   * Initialise extension\n   */\n\n\n  FiltersVisibility.prototype.init = function init() {\n    var _this2 = this;\n\n    if (this.initialized) {\n      return;\n    }\n\n    this.buildUI();\n\n    /**\n     * @inherited\n     */\n    this.initialized = true;\n\n    this.emitter.on(['show-filters'], function (tf, visible) {\n      return _this2.show(visible);\n    });\n    this.emitter.emit('filters-visibility-initialized', this.tf, this);\n  };\n\n  /**\n   * Build UI elements\n   */\n\n\n  FiltersVisibility.prototype.buildUI = function buildUI() {\n    var _this3 = this;\n\n    var tf = this.tf;\n    var span = (0, _dom.createElm)('span');\n    span.className = this.contCssClass;\n\n    //Container element (rdiv or custom element)\n    if (!this.targetId) {\n      tf.setToolbar();\n    }\n    var targetEl = !this.targetId ? tf.rDiv : (0, _dom.elm)(this.targetId);\n\n    if (!this.targetId) {\n      var firstChild = targetEl.firstChild;\n      firstChild.parentNode.insertBefore(span, firstChild);\n    } else {\n      targetEl.appendChild(span);\n    }\n\n    var btn = void 0;\n    if (!this.btnHtml) {\n      btn = (0, _dom.createElm)('a', ['href', 'javascript:void(0);']);\n      btn.className = this.btnCssClass;\n      btn.title = this.btnText || this.defaultText;\n      btn.innerHTML = this.collapseBtnHtml;\n      span.appendChild(btn);\n    } else {\n      //Custom html\n      span.innerHTML = this.btnHtml;\n      btn = span.firstChild;\n    }\n\n    (0, _event.addEvt)(btn, 'click', function () {\n      return _this3.toggle();\n    });\n\n    this.contEl = span;\n    this.btnEl = btn;\n\n    if (!this.visibleAtStart) {\n      this.toggle();\n    }\n  };\n\n  /**\n   * Toggle filters visibility\n   */\n\n\n  FiltersVisibility.prototype.toggle = function toggle() {\n    var tf = this.tf;\n    var tbl = tf.gridLayout ? tf.feature('gridLayout').headTbl : tf.dom();\n    var fltRow = tbl.rows[this.filtersRowIndex];\n    var isDisplayed = fltRow.style.display === '';\n\n    this.show(!isDisplayed);\n  };\n\n  /**\n   * Show or hide filters\n   *\n   * @param {boolean} [visible=true] Visibility flag\n   */\n\n\n  FiltersVisibility.prototype.show = function show() {\n    var visible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n    var tf = this.tf;\n    var tbl = tf.gridLayout ? tf.feature('gridLayout').headTbl : tf.dom();\n    var fltRow = tbl.rows[this.filtersRowIndex];\n\n    if (visible) {\n      this.onBeforeShow(this);\n    }\n    if (!visible) {\n      this.onBeforeHide(this);\n    }\n\n    fltRow.style.display = visible ? '' : 'none';\n    if (this.enableIcon && !this.btnHtml) {\n      this.btnEl.innerHTML = visible ? this.collapseBtnHtml : this.expandBtnHtml;\n    }\n\n    if (visible) {\n      this.onAfterShow(this);\n    }\n    if (!visible) {\n      this.onAfterHide(this);\n    }\n\n    this.emitter.emit('filters-toggled', tf, this, visible);\n  };\n\n  /**\n   * Destroy the UI\n   */\n\n\n  FiltersVisibility.prototype.destroy = function destroy() {\n    var _this4 = this;\n\n    if (!this.initialized) {\n      return;\n    }\n\n    this.emitter.off(['show-filters'], function (tf, visible) {\n      return _this4.show(visible);\n    });\n\n    this.btnEl.innerHTML = '';\n    (0, _dom.removeElm)(this.btnEl);\n    this.btnEl = null;\n\n    this.contEl.innerHTML = '';\n    (0, _dom.removeElm)(this.contEl);\n    this.contEl = null;\n    this.initialized = false;\n  };\n\n  return FiltersVisibility;\n}(_feature.Feature);\n\nexports.default = FiltersVisibility;\n\n/***/ }),\n\n/***/ 444:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _adapterSortabletable = __webpack_require__(439);\n\nvar _adapterSortabletable2 = _interopRequireDefault(_adapterSortabletable);\n\nvar _root = __webpack_require__(14);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nif (!_root.root.SortableTable) {\n    __webpack_require__(448);\n}\n\nexports.default = _adapterSortabletable2.default;\n\n/***/ }),\n\n/***/ 445:\n/***/ (function(module, exports) {\n\n\nmodule.exports = formatter;\n\nfunction formatter(options) {\n  options = options || {};\n\n\n  // *********************************************************************************************\n  // Set defaults for negatives\n  // options.negative, options.negativeOut, options.separator retained for backward compatibility\n  // *********************************************************************************************\n\n  // type of negative; default left\n  options.negativeType = options.negativeType || (options.negative === 'R' ? 'right' : 'left')\n\n  // negative symbols '-' or '()'\n  if (typeof options.negativeLeftSymbol !== 'string') {\n    switch (options.negativeType) {\n      case 'left':\n        options.negativeLeftSymbol = '-';\n        break;\n      case 'brackets':\n        options.negativeLeftSymbol = '(';\n        break;\n      default:\n        options.negativeLeftSymbol = '';\n    }\n  }\n  if (typeof options.negativeRightSymbol !== 'string') {\n    switch (options.negativeType) {\n      case 'right':\n        options.negativeRightSymbol = '-';\n        break;\n      case 'brackets':\n        options.negativeRightSymbol = ')';\n        break;\n      default:\n        options.negativeRightSymbol = '';\n    }\n  }\n\n  // whether negative symbol should be inside/outside prefix and suffix\n\n  if (typeof options.negativeLeftOut !== \"boolean\") {\n    options.negativeLeftOut = (options.negativeOut === false ? false : true);\n  }\n  if (typeof options.negativeRightOut !== \"boolean\") {\n    options.negativeRightOut = (options.negativeOut === false ? false : true);\n  }\n\n  //prefix and suffix\n  options.prefix = options.prefix || '';\n  options.suffix = options.suffix || '';\n\n  //separators\n  if (typeof options.integerSeparator !== 'string') {\n    options.integerSeparator = (typeof options.separator === 'string' ? options.separator : ',');\n  }\n  options.decimalsSeparator = typeof options.decimalsSeparator === 'string' ? options.decimalsSeparator : '';\n  options.decimal = options.decimal || '.';\n\n  //padders\n  options.padLeft = options.padLeft || -1 //default no padding\n  options.padRight = options.padRight || -1 //default no padding\n\n  function format(number, overrideOptions) {\n    overrideOptions = overrideOptions || {};\n\n    if (number || number === 0) {\n      number = '' + number;//convert number to string if it isn't already\n    } else {\n      return '';\n    }\n\n    //identify a negative number and make it absolute\n    var output = [];\n    var negative = number.charAt(0) === '-';\n    number = number.replace(/^\\-/g, '');\n\n    //Prepare output with left hand negative and/or prefix\n    if (!options.negativeLeftOut && !overrideOptions.noUnits) {\n      output.push(options.prefix);\n    }\n    if (negative) {\n      output.push(options.negativeLeftSymbol);\n    }\n    if (options.negativeLeftOut && !overrideOptions.noUnits) {\n      output.push(options.prefix);\n    }\n\n    //Format core number\n    number = number.split('.');\n    if (options.round != null) round(number, options.round);\n    if (options.truncate != null) number[1] = truncate(number[1], options.truncate);\n    if (options.padLeft > 0) number[0] = padLeft(number[0], options.padLeft);\n    if (options.padRight > 0) number[1] = padRight(number[1], options.padRight);\n    if (!overrideOptions.noSeparator && number[1]) number[1] = addDecimalSeparators(number[1], options.decimalsSeparator);\n    if (!overrideOptions.noSeparator && number[0]) number[0] = addIntegerSeparators(number[0], options.integerSeparator);\n    output.push(number[0]);\n    if (number[1]) {\n      output.push(options.decimal);\n      output.push(number[1]);\n    }\n\n    //Prepare output with right hand negative and/or prefix\n    if (options.negativeRightOut && !overrideOptions.noUnits) {\n      output.push(options.suffix);\n    }\n    if (negative) {\n      output.push(options.negativeRightSymbol);\n    }\n    if (!options.negativeRightOut && !overrideOptions.noUnits) {\n      output.push(options.suffix);\n    }\n\n    //join output and return\n    return output.join('');\n  }\n\n  format.negative = options.negative;\n  format.negativeOut = options.negativeOut;\n  format.negativeType = options.negativeType;\n  format.negativeLeftOut = options.negativeLeftOut;\n  format.negativeLeftSymbol = options.negativeLeftSymbol;\n  format.negativeRightOut = options.negativeRightOut;\n  format.negativeRightSymbol = options.negativeRightSymbol;\n  format.prefix = options.prefix;\n  format.suffix = options.suffix;\n  format.separate = options.separate;\n  format.integerSeparator = options.integerSeparator;\n  format.decimalsSeparator = options.decimalsSeparator;\n  format.decimal = options.decimal;\n  format.padLeft = options.padLeft;\n  format.padRight = options.padRight;\n  format.truncate = options.truncate;\n  format.round = options.round;\n\n  function unformat(number, allowedSeparators) {\n    allowedSeparators = allowedSeparators || [];\n    if (options.allowedSeparators) {\n      options.allowedSeparators.forEach(function (s) { allowedSeparators.push (s); });\n    }\n    allowedSeparators.push(options.integerSeparator);\n    allowedSeparators.push(options.decimalsSeparator);\n    number = number.replace(options.prefix, '');\n    number = number.replace(options.suffix, '');\n    var newNumber = number;\n    do {\n      number = newNumber;\n      for (var i = 0; i < allowedSeparators.length; i++) {\n        newNumber = newNumber.replace(allowedSeparators[i], '');\n      }\n    } while (newNumber != number);\n    return number;\n  }\n  format.unformat = unformat;\n\n  function validate(number, allowedSeparators) {\n    number = unformat(number, allowedSeparators);\n    number = number.split(options.decimal);\n    if (number.length > 2) {\n      return false;\n    } else if (options.truncate != null && number[1] && number[1].length > options.truncate) {\n      return false;\n    }  else if (options.round != null && number[1] && number[1].length > options.round) {\n      return false;\n    } else {\n      return /^-?\\d+\\.?\\d*$/.test(number);\n    }\n  }\n  return format;\n}\n\n//where x is already the integer part of the number\nfunction addIntegerSeparators(x, separator) {\n  x += '';\n  if (!separator) return x;\n  var rgx = /(\\d+)(\\d{3})/;\n  while (rgx.test(x)) {\n    x = x.replace(rgx, '$1' + separator + '$2');\n  }\n  return x;\n}\n\n//where x is already the decimal part of the number\nfunction addDecimalSeparators(x, separator) {\n  x += '';\n  if (!separator) return x;\n  var rgx = /(\\d{3})(\\d+)/;\n  while (rgx.test(x)) {\n    x = x.replace(rgx, '$1' + separator + '$2');\n  }\n  return x;\n}\n\n//where x is the integer part of the number\nfunction padLeft(x, padding) {\n  x = x + '';\n  var buf = [];\n  while (buf.length + x.length < padding) {\n    buf.push('0');\n  }\n  return buf.join('') + x;\n}\n\n//where x is the decimals part of the number\nfunction padRight(x, padding) {\n  if (x) {\n    x += '';\n  } else {\n    x = '';\n  }\n  var buf = [];\n  while (buf.length + x.length < padding) {\n    buf.push('0');\n  }\n  return x + buf.join('');\n}\nfunction truncate(x, length) {\n  if (x) {\n    x += '';\n  }\n  if (x && x.length > length) {\n    return x.substr(0, length);\n  } else {\n    return x;\n  }\n}\n\n//where number is an array with 0th item as integer string and 1st item as decimal string (no negatives)\nfunction round(number, places) {\n  if (number[1] && places >= 0 && number[1].length > places) {\n    //truncate to correct number of decimal places\n    var decim = number[1].slice(0, places);\n    //if next digit was >= 5 we need to round up\n    if (+(number[1].substr(places, 1)) >= 5) {\n      //But first count leading zeros as converting to a number will loose them\n      var leadingzeros = \"\";\n      while (decim.charAt(0)===\"0\") {\n        leadingzeros = leadingzeros + \"0\";\n        decim = decim.substr(1);\n      }\n      //Then we can change decim to a number and add 1 before replacing leading zeros\n      decim = (+decim + 1) + '';\n      decim = leadingzeros + decim;\n      if (decim.length > places) {\n        //adding one has made it longer\n        number[0] = (+number[0]+ +decim.charAt(0)) + ''; //add value of firstchar to the integer part\n        decim = decim.substring(1);   //ignore the 1st char at the beginning which is the carry to the integer part\n      }\n    }\n    number[1] = decim;\n  }\n  return number;\n}\n\n\n/***/ }),\n\n/***/ 446:\n/***/ (function(module, exports) {\n\nmodule.exports = \"/*----------------------------------------------------------------------------\\\\\\n|                            Sortable Table 1.12                              |\\n|-----------------------------------------------------------------------------|\\n|                         Created by Erik Arvidsson                           |\\n|                  (http://webfx.eae.net/contact.html#erik)                   |\\n|                      For WebFX (http://webfx.eae.net/)                      |\\n|-----------------------------------------------------------------------------|\\n| A DOM 1 based script that allows an ordinary HTML table to be sortable.     |\\n|-----------------------------------------------------------------------------|\\n|                  Copyright (c) 1998 - 2006 Erik Arvidsson                   |\\n|-----------------------------------------------------------------------------|\\n| Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not |\\n| use this file except in compliance with the License.  You may obtain a copy |\\n| of the License at http://www.apache.org/licenses/LICENSE-2.0                |\\n| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - |\\n| Unless  required  by  applicable law or  agreed  to  in  writing,  software |\\n| distributed under the License is distributed on an  \\\"AS IS\\\" BASIS,  WITHOUT |\\n| WARRANTIES OR  CONDITIONS OF ANY KIND,  either express or implied.  See the |\\n| License  for the  specific language  governing permissions  and limitations |\\n| under the License.                                                          |\\n|-----------------------------------------------------------------------------|\\n| 2003-01-10 | First version                                                  |\\n| 2003-01-19 | Minor changes to the date parsing                              |\\n| 2003-01-28 | JScript 5.0 fixes (no support for 'in' operator)               |\\n| 2003-02-01 | Sloppy typo like error fixed in getInnerText                   |\\n| 2003-07-04 | Added workaround for IE cellIndex bug.                         |\\n| 2003-11-09 | The bDescending argument to sort was not correctly working     |\\n|            | Using onclick DOM0 event if no support for addEventListener    |\\n|            | or attachEvent                                                 |\\n| 2004-01-13 | Adding addSortType and removeSortType which makes it a lot     |\\n|            | easier to add new, custom sort types.                          |\\n| 2004-01-27 | Switch to use descending = false as the default sort order.    |\\n|            | Change defaultDescending to suit your needs.                   |\\n| 2004-03-14 | Improved sort type None look and feel a bit                    |\\n| 2004-08-26 | Made the handling of tBody and tHead more flexible. Now you    |\\n|            | can use another tHead or no tHead, and you can chose some      |\\n|            | other tBody.                                                   |\\n| 2006-04-25 | Changed license to Apache Software License 2.0                 |\\n|-----------------------------------------------------------------------------|\\n| Created 2003-01-10 | All changes are in the log above. | Updated 2006-04-25 |\\n\\\\----------------------------------------------------------------------------*/\\n\\n\\nfunction SortableTable(oTable, oSortTypes) {\\n\\n\\tthis.sortTypes = oSortTypes || [];\\n\\n\\tthis.sortColumn = null;\\n\\tthis.descending = null;\\n\\n\\tvar oThis = this;\\n\\tthis._headerOnclick = function (e) {\\n\\t\\toThis.headerOnclick(e);\\n\\t};\\n\\n\\tif (oTable) {\\n\\t\\tthis.setTable( oTable );\\n\\t\\tthis.document = oTable.ownerDocument || oTable.document;\\n\\t}\\n\\telse {\\n\\t\\tthis.document = document;\\n\\t}\\n\\n\\n\\t// only IE needs this\\n\\tvar win = this.document.defaultView || this.document.parentWindow;\\n\\tthis._onunload = function () {\\n\\t\\toThis.destroy();\\n\\t};\\n\\tif (win && typeof win.attachEvent != \\\"undefined\\\") {\\n\\t\\twin.attachEvent(\\\"onunload\\\", this._onunload);\\n\\t}\\n}\\n\\nSortableTable.gecko = navigator.product == \\\"Gecko\\\";\\nSortableTable.msie = /msie/i.test(navigator.userAgent);\\n// Mozilla is faster when doing the DOM manipulations on\\n// an orphaned element. MSIE is not\\nSortableTable.removeBeforeSort = SortableTable.gecko;\\n\\nSortableTable.prototype.onsort = function () {};\\n\\n// default sort order. true -> descending, false -> ascending\\nSortableTable.prototype.defaultDescending = false;\\n\\n// shared between all instances. This is intentional to allow external files\\n// to modify the prototype\\nSortableTable.prototype._sortTypeInfo = {};\\n\\nSortableTable.prototype.setTable = function (oTable) {\\n\\tif ( this.tHead )\\n\\t\\tthis.uninitHeader();\\n\\tthis.element = oTable;\\n\\tthis.setTHead( oTable.tHead );\\n\\tthis.setTBody( oTable.tBodies[0] );\\n};\\n\\nSortableTable.prototype.setTHead = function (oTHead) {\\n\\tif (this.tHead && this.tHead != oTHead )\\n\\t\\tthis.uninitHeader();\\n\\tthis.tHead = oTHead;\\n\\tthis.initHeader( this.sortTypes );\\n};\\n\\nSortableTable.prototype.setTBody = function (oTBody) {\\n\\tthis.tBody = oTBody;\\n};\\n\\nSortableTable.prototype.setSortTypes = function ( oSortTypes ) {\\n\\tif ( this.tHead )\\n\\t\\tthis.uninitHeader();\\n\\tthis.sortTypes = oSortTypes || [];\\n\\tif ( this.tHead )\\n\\t\\tthis.initHeader( this.sortTypes );\\n};\\n\\n// adds arrow containers and events\\n// also binds sort type to the header cells so that reordering columns does\\n// not break the sort types\\nSortableTable.prototype.initHeader = function (oSortTypes) {\\n\\tif (!this.tHead) return;\\n\\tvar cells = this.tHead.rows[0].cells;\\n\\tvar doc = this.tHead.ownerDocument || this.tHead.document;\\n\\tthis.sortTypes = oSortTypes || [];\\n\\tvar l = cells.length;\\n\\tvar img, c;\\n\\tfor (var i = 0; i < l; i++) {\\n\\t\\tc = cells[i];\\n\\t\\tif (this.sortTypes[i] != null && this.sortTypes[i] != \\\"None\\\") {\\n\\t\\t\\timg = doc.createElement(\\\"IMG\\\");\\n\\t\\t\\timg.src = \\\"images/blank.png\\\";\\n\\t\\t\\tc.appendChild(img);\\n\\t\\t\\tif (this.sortTypes[i] != null)\\n\\t\\t\\t\\tc._sortType = this.sortTypes[i];\\n\\t\\t\\tif (typeof c.addEventListener != \\\"undefined\\\")\\n\\t\\t\\t\\tc.addEventListener(\\\"click\\\", this._headerOnclick, false);\\n\\t\\t\\telse if (typeof c.attachEvent != \\\"undefined\\\")\\n\\t\\t\\t\\tc.attachEvent(\\\"onclick\\\", this._headerOnclick);\\n\\t\\t\\telse\\n\\t\\t\\t\\tc.onclick = this._headerOnclick;\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tc.setAttribute( \\\"_sortType\\\", oSortTypes[i] );\\n\\t\\t\\tc._sortType = \\\"None\\\";\\n\\t\\t}\\n\\t}\\n\\tthis.updateHeaderArrows();\\n};\\n\\n// remove arrows and events\\nSortableTable.prototype.uninitHeader = function () {\\n\\tif (!this.tHead) return;\\n\\tvar cells = this.tHead.rows[0].cells;\\n\\tvar l = cells.length;\\n\\tvar c;\\n\\tfor (var i = 0; i < l; i++) {\\n\\t\\tc = cells[i];\\n\\t\\tif (c._sortType != null && c._sortType != \\\"None\\\") {\\n\\t\\t\\tc.removeChild(c.lastChild);\\n\\t\\t\\tif (typeof c.removeEventListener != \\\"undefined\\\")\\n\\t\\t\\t\\tc.removeEventListener(\\\"click\\\", this._headerOnclick, false);\\n\\t\\t\\telse if (typeof c.detachEvent != \\\"undefined\\\")\\n\\t\\t\\t\\tc.detachEvent(\\\"onclick\\\", this._headerOnclick);\\n\\t\\t\\tc._sortType = null;\\n\\t\\t\\tc.removeAttribute( \\\"_sortType\\\" );\\n\\t\\t}\\n\\t}\\n};\\n\\nSortableTable.prototype.updateHeaderArrows = function () {\\n\\tif (!this.tHead) return;\\n\\tvar cells = this.tHead.rows[0].cells;\\n\\tvar l = cells.length;\\n\\tvar img;\\n\\tfor (var i = 0; i < l; i++) {\\n\\t\\tif (cells[i]._sortType != null && cells[i]._sortType != \\\"None\\\") {\\n\\t\\t\\timg = cells[i].lastChild;\\n\\t\\t\\tif (i == this.sortColumn)\\n\\t\\t\\t\\timg.className = \\\"sort-arrow \\\" + (this.descending ? \\\"descending\\\" : \\\"ascending\\\");\\n\\t\\t\\telse\\n\\t\\t\\t\\timg.className = \\\"sort-arrow\\\";\\n\\t\\t}\\n\\t}\\n};\\n\\nSortableTable.prototype.headerOnclick = function (e) {\\n\\t// find TD element\\n\\tvar el = e.target || e.srcElement;\\n\\twhile (el.tagName != \\\"TD\\\")\\n\\t\\tel = el.parentNode;\\n\\n\\tthis.sort(SortableTable.msie ? SortableTable.getCellIndex(el) : el.cellIndex);\\n};\\n\\n// IE returns wrong cellIndex when columns are hidden\\nSortableTable.getCellIndex = function (oTd) {\\n\\tvar cells = oTd.parentNode.childNodes\\n\\tvar l = cells.length;\\n\\tvar i;\\n\\tfor (i = 0; cells[i] != oTd && i < l; i++)\\n\\t\\t;\\n\\treturn i;\\n};\\n\\nSortableTable.prototype.getSortType = function (nColumn) {\\n\\treturn this.sortTypes[nColumn] || \\\"String\\\";\\n};\\n\\n// only nColumn is required\\n// if bDescending is left out the old value is taken into account\\n// if sSortType is left out the sort type is found from the sortTypes array\\n\\nSortableTable.prototype.sort = function (nColumn, bDescending, sSortType) {\\n\\tif (!this.tBody) return;\\n\\tif (sSortType == null)\\n\\t\\tsSortType = this.getSortType(nColumn);\\n\\n\\t// exit if None\\n\\tif (sSortType == \\\"None\\\")\\n\\t\\treturn;\\n\\n\\tif (bDescending == null) {\\n\\t\\tif (this.sortColumn != nColumn)\\n\\t\\t\\tthis.descending = this.defaultDescending;\\n\\t\\telse\\n\\t\\t\\tthis.descending = !this.descending;\\n\\t}\\n\\telse\\n\\t\\tthis.descending = bDescending;\\n\\n\\tthis.sortColumn = nColumn;\\n\\n\\tif (typeof this.onbeforesort == \\\"function\\\")\\n\\t\\tthis.onbeforesort();\\n\\n\\tvar f = this.getSortFunction(sSortType, nColumn);\\n\\tvar a = this.getCache(sSortType, nColumn);\\n\\tvar tBody = this.tBody;\\n\\n\\ta.sort(f);\\n\\n\\tif (this.descending)\\n\\t\\ta.reverse();\\n\\n\\tif (SortableTable.removeBeforeSort) {\\n\\t\\t// remove from doc\\n\\t\\tvar nextSibling = tBody.nextSibling;\\n\\t\\tvar p = tBody.parentNode;\\n\\t\\tp.removeChild(tBody);\\n\\t}\\n\\n\\t// insert in the new order\\n\\tvar l = a.length;\\n\\tfor (var i = 0; i < l; i++)\\n\\t\\ttBody.appendChild(a[i].element);\\n\\n\\tif (SortableTable.removeBeforeSort) {\\n\\t\\t// insert into doc\\n\\t\\tp.insertBefore(tBody, nextSibling);\\n\\t}\\n\\n\\tthis.updateHeaderArrows();\\n\\n\\tthis.destroyCache(a);\\n\\n\\tif (typeof this.onsort == \\\"function\\\")\\n\\t\\tthis.onsort();\\n};\\n\\nSortableTable.prototype.asyncSort = function (nColumn, bDescending, sSortType) {\\n\\tvar oThis = this;\\n\\tthis._asyncsort = function () {\\n\\t\\toThis.sort(nColumn, bDescending, sSortType);\\n\\t};\\n\\twindow.setTimeout(this._asyncsort, 1);\\n};\\n\\nSortableTable.prototype.getCache = function (sType, nColumn) {\\n\\tif (!this.tBody) return [];\\n\\tvar rows = this.tBody.rows;\\n\\tvar l = rows.length;\\n\\tvar a = new Array(l);\\n\\tvar r;\\n\\tfor (var i = 0; i < l; i++) {\\n\\t\\tr = rows[i];\\n\\t\\ta[i] = {\\n\\t\\t\\tvalue:\\t\\tthis.getRowValue(r, sType, nColumn),\\n\\t\\t\\telement:\\tr\\n\\t\\t};\\n\\t};\\n\\treturn a;\\n};\\n\\nSortableTable.prototype.destroyCache = function (oArray) {\\n\\tvar l = oArray.length;\\n\\tfor (var i = 0; i < l; i++) {\\n\\t\\toArray[i].value = null;\\n\\t\\toArray[i].element = null;\\n\\t\\toArray[i] = null;\\n\\t}\\n};\\n\\nSortableTable.prototype.getRowValue = function (oRow, sType, nColumn) {\\n\\t// if we have defined a custom getRowValue use that\\n\\tif (this._sortTypeInfo[sType] && this._sortTypeInfo[sType].getRowValue)\\n\\t\\treturn this._sortTypeInfo[sType].getRowValue(oRow, nColumn);\\n\\n\\tvar s;\\n\\tvar c = oRow.cells[nColumn];\\n\\tif (typeof c.innerText != \\\"undefined\\\")\\n\\t\\ts = c.innerText;\\n\\telse\\n\\t\\ts = SortableTable.getInnerText(c);\\n\\treturn this.getValueFromString(s, sType);\\n};\\n\\nSortableTable.getInnerText = function (oNode) {\\n\\tvar s = \\\"\\\";\\n\\tvar cs = oNode.childNodes;\\n\\tvar l = cs.length;\\n\\tfor (var i = 0; i < l; i++) {\\n\\t\\tswitch (cs[i].nodeType) {\\n\\t\\t\\tcase 1: //ELEMENT_NODE\\n\\t\\t\\t\\ts += SortableTable.getInnerText(cs[i]);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\t//TEXT_NODE\\n\\t\\t\\t\\ts += cs[i].nodeValue;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\treturn s;\\n};\\n\\nSortableTable.prototype.getValueFromString = function (sText, sType) {\\n\\tif (this._sortTypeInfo[sType])\\n\\t\\treturn this._sortTypeInfo[sType].getValueFromString( sText );\\n\\treturn sText;\\n\\t/*\\n\\tswitch (sType) {\\n\\t\\tcase \\\"Number\\\":\\n\\t\\t\\treturn Number(sText);\\n\\t\\tcase \\\"CaseInsensitiveString\\\":\\n\\t\\t\\treturn sText.toUpperCase();\\n\\t\\tcase \\\"Date\\\":\\n\\t\\t\\tvar parts = sText.split(\\\"-\\\");\\n\\t\\t\\tvar d = new Date(0);\\n\\t\\t\\td.setFullYear(parts[0]);\\n\\t\\t\\td.setDate(parts[2]);\\n\\t\\t\\td.setMonth(parts[1] - 1);\\n\\t\\t\\treturn d.valueOf();\\n\\t}\\n\\treturn sText;\\n\\t*/\\n\\t};\\n\\nSortableTable.prototype.getSortFunction = function (sType, nColumn) {\\n\\tif (this._sortTypeInfo[sType])\\n\\t\\treturn this._sortTypeInfo[sType].compare;\\n\\treturn SortableTable.basicCompare;\\n};\\n\\nSortableTable.prototype.destroy = function () {\\n\\tthis.uninitHeader();\\n\\tvar win = this.document.parentWindow;\\n\\tif (win && typeof win.detachEvent != \\\"undefined\\\") {\\t// only IE needs this\\n\\t\\twin.detachEvent(\\\"onunload\\\", this._onunload);\\n\\t}\\n\\tthis._onunload = null;\\n\\tthis.element = null;\\n\\tthis.tHead = null;\\n\\tthis.tBody = null;\\n\\tthis.document = null;\\n\\tthis._headerOnclick = null;\\n\\tthis.sortTypes = null;\\n\\tthis._asyncsort = null;\\n\\tthis.onsort = null;\\n};\\n\\n// Adds a sort type to all instance of SortableTable\\n// sType : String - the identifier of the sort type\\n// fGetValueFromString : function ( s : string ) : T - A function that takes a\\n//    string and casts it to a desired format. If left out the string is just\\n//    returned\\n// fCompareFunction : function ( n1 : T, n2 : T ) : Number - A normal JS sort\\n//    compare function. Takes two values and compares them. If left out less than,\\n//    <, compare is used\\n// fGetRowValue : function( oRow : HTMLTRElement, nColumn : int ) : T - A function\\n//    that takes the row and the column index and returns the value used to compare.\\n//    If left out then the innerText is first taken for the cell and then the\\n//    fGetValueFromString is used to convert that string the desired value and type\\n\\nSortableTable.prototype.addSortType = function (sType, fGetValueFromString, fCompareFunction, fGetRowValue) {\\n\\tthis._sortTypeInfo[sType] = {\\n\\t\\ttype:\\t\\t\\t\\tsType,\\n\\t\\tgetValueFromString:\\tfGetValueFromString || SortableTable.idFunction,\\n\\t\\tcompare:\\t\\t\\tfCompareFunction || SortableTable.basicCompare,\\n\\t\\tgetRowValue:\\t\\tfGetRowValue\\n\\t};\\n};\\n\\n// this removes the sort type from all instances of SortableTable\\nSortableTable.prototype.removeSortType = function (sType) {\\n\\tdelete this._sortTypeInfo[sType];\\n};\\n\\nSortableTable.basicCompare = function compare(n1, n2) {\\n\\tif (n1.value < n2.value)\\n\\t\\treturn -1;\\n\\tif (n2.value < n1.value)\\n\\t\\treturn 1;\\n\\treturn 0;\\n};\\n\\nSortableTable.idFunction = function (x) {\\n\\treturn x;\\n};\\n\\nSortableTable.toUpperCase = function (s) {\\n\\treturn s.toUpperCase();\\n};\\n\\nSortableTable.toDate = function (s) {\\n\\tvar parts = s.split(\\\"-\\\");\\n\\tvar d = new Date(0);\\n\\td.setFullYear(parts[0]);\\n\\td.setDate(parts[2]);\\n\\td.setMonth(parts[1] - 1);\\n\\treturn d.valueOf();\\n};\\n\\n\\n// add sort types\\nSortableTable.prototype.addSortType(\\\"Number\\\", Number);\\nSortableTable.prototype.addSortType(\\\"CaseInsensitiveString\\\", SortableTable.toUpperCase);\\nSortableTable.prototype.addSortType(\\\"Date\\\", SortableTable.toDate);\\nSortableTable.prototype.addSortType(\\\"String\\\");\\n// None is a special case\\n\"\n\n/***/ }),\n\n/***/ 447:\n/***/ (function(module, exports) {\n\n/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\nmodule.exports = function(src) {\r\n\tif (typeof execScript !== \"undefined\")\r\n\t\texecScript(src);\r\n\telse\r\n\t\teval.call(null, src);\r\n}\r\n\n\n/***/ }),\n\n/***/ 448:\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(447)(__webpack_require__(446))\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// tf-0-40ce26a7d99d526a4eae.js","var map = {\n\t\"./array\": 67,\n\t\"./array.js\": 67,\n\t\"./const\": 15,\n\t\"./const.js\": 15,\n\t\"./cookie\": 121,\n\t\"./cookie.js\": 121,\n\t\"./dom\": 8,\n\t\"./dom.js\": 8,\n\t\"./emitter\": 69,\n\t\"./emitter.js\": 69,\n\t\"./event\": 17,\n\t\"./event.js\": 17,\n\t\"./extensions/advancedGrid/adapterEzEditTable\": 438,\n\t\"./extensions/advancedGrid/adapterEzEditTable.js\": 438,\n\t\"./extensions/advancedGrid/advancedGrid\": 440,\n\t\"./extensions/advancedGrid/advancedGrid.js\": 440,\n\t\"./extensions/colOps/colOps\": 441,\n\t\"./extensions/colOps/colOps.js\": 441,\n\t\"./extensions/colsVisibility/colsVisibility\": 442,\n\t\"./extensions/colsVisibility/colsVisibility.js\": 442,\n\t\"./extensions/filtersVisibility/filtersVisibility\": 443,\n\t\"./extensions/filtersVisibility/filtersVisibility.js\": 443,\n\t\"./extensions/sort/adapterSortabletable\": 439,\n\t\"./extensions/sort/adapterSortabletable.js\": 439,\n\t\"./extensions/sort/sort\": 444,\n\t\"./extensions/sort/sort.js\": 444,\n\t\"./feature\": 9,\n\t\"./feature.js\": 9,\n\t\"./modules/alternateRows\": 70,\n\t\"./modules/alternateRows.js\": 70,\n\t\"./modules/checkList\": 71,\n\t\"./modules/checkList.js\": 71,\n\t\"./modules/clearButton\": 72,\n\t\"./modules/clearButton.js\": 72,\n\t\"./modules/dateType\": 73,\n\t\"./modules/dateType.js\": 73,\n\t\"./modules/dropdown\": 74,\n\t\"./modules/dropdown.js\": 74,\n\t\"./modules/gridLayout\": 75,\n\t\"./modules/gridLayout.js\": 75,\n\t\"./modules/hash\": 122,\n\t\"./modules/hash.js\": 122,\n\t\"./modules/help\": 76,\n\t\"./modules/help.js\": 76,\n\t\"./modules/highlightKeywords\": 77,\n\t\"./modules/highlightKeywords.js\": 77,\n\t\"./modules/loader\": 78,\n\t\"./modules/loader.js\": 78,\n\t\"./modules/markActiveColumns\": 79,\n\t\"./modules/markActiveColumns.js\": 79,\n\t\"./modules/noResults\": 80,\n\t\"./modules/noResults.js\": 80,\n\t\"./modules/paging\": 81,\n\t\"./modules/paging.js\": 81,\n\t\"./modules/popupFilter\": 82,\n\t\"./modules/popupFilter.js\": 82,\n\t\"./modules/rowsCounter\": 83,\n\t\"./modules/rowsCounter.js\": 83,\n\t\"./modules/state\": 84,\n\t\"./modules/state.js\": 84,\n\t\"./modules/statusBar\": 85,\n\t\"./modules/statusBar.js\": 85,\n\t\"./modules/storage\": 123,\n\t\"./modules/storage.js\": 123,\n\t\"./number\": 68,\n\t\"./number.js\": 68,\n\t\"./root\": 14,\n\t\"./root.js\": 14,\n\t\"./sort\": 66,\n\t\"./sort.js\": 66,\n\t\"./string\": 19,\n\t\"./string.js\": 19,\n\t\"./tablefilter\": 124,\n\t\"./tablefilter.js\": 124,\n\t\"./types\": 10,\n\t\"./types.js\": 10\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 437;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src ^\\.\\/.*$\n// module id = 437\n// module chunks = 0","import {Feature} from '../../feature';\nimport {tag} from '../../dom';\nimport {INPUT} from '../../const';\nimport {root} from '../../root';\n\nconst INSTANTIATION_ERROR = `Failed to instantiate EditTable object.\n    \\n\"ezEditTable\" dependency not found.`;\n\n/**\n * Adapter module for ezEditTable, an external library providing advanced\n * grid features (selection and edition):\n * http://codecanyon.net/item/ezedittable-enhance-html-tables/2425123?ref=koalyptus\n */\nexport default class AdapterEzEditTable extends Feature {\n\n    /**\n     * Creates an instance of AdapterEzEditTable\n     *\n     * @param {TableFilter} tf TableFilter instance\n     * @param {Object} cfg Configuration options for ezEditTable library\n     */\n    constructor(tf, cfg) {\n        super(tf, cfg.name);\n\n        /**\n         * Module description\n         * @type {String}\n         */\n        this.desc = cfg.description || 'ezEditTable adapter';\n\n        /**\n         * Filename of ezEditTable library\n         * @type {String}\n         */\n        this.filename = cfg.filename || 'ezEditTable.js';\n\n        /**\n         * Path to ezEditTable library\n         * @type {String}\n         */\n        this.vendorPath = cfg.vendor_path;\n\n        /**\n         * Load ezEditTable stylesheet\n         * @type {Boolean}\n         */\n        this.loadStylesheet = Boolean(cfg.load_stylesheet);\n\n        /**\n         * Path to ezEditTable stylesheet\n         * @type {String}\n         */\n        this.stylesheet = cfg.stylesheet || this.vendorPath + 'ezEditTable.css';\n\n        /**\n         * Name of ezEditTable stylesheet\n         * @type {String}\n         */\n        this.stylesheetName = cfg.stylesheet_name || 'ezEditTableCss';\n\n        // Enable the ezEditTable's scroll into view behaviour if grid layout on\n        cfg.scroll_into_view = cfg.scroll_into_view === false ?\n            false : tf.gridLayout;\n\n        /**\n         * ezEditTable instance\n         * @type {EditTable}\n         * @private\n         */\n        this._ezEditTable = null;\n\n        /**\n         * ezEditTable configuration\n         * @private\n         */\n        this.cfg = cfg;\n\n        this.enable();\n    }\n\n    /**\n     * Conditionally load ezEditTable library and set advanced grid\n     */\n    init() {\n        if (this.initialized) {\n            return;\n        }\n        let tf = this.tf;\n        if (root.EditTable) {\n            this._setAdvancedGrid();\n        } else {\n            let path = this.vendorPath + this.filename;\n            tf.import(this.filename, path, () => this._setAdvancedGrid());\n        }\n        if (this.loadStylesheet && !tf.isImported(this.stylesheet, 'link')) {\n            tf.import(this.stylesheetName, this.stylesheet, null, 'link');\n        }\n\n        // TODO: hack to prevent ezEditTable enter key event hijaking.\n        // Needs to be fixed in the vendor's library\n        this.emitter.on(['filter-focus', 'filter-blur'],\n            () => this._toggleForInputFilter());\n\n        /**\n         * @inherited\n         */\n        this.initialized = true;\n    }\n\n    /**\n     * Instantiate ezEditTable component for advanced grid features\n     * @private\n     */\n    _setAdvancedGrid() {\n        let tf = this.tf;\n\n        //start row for EditTable constructor needs to be calculated\n        let startRow,\n            cfg = this.cfg,\n            thead = tag(tf.dom(), 'thead');\n\n        //if thead exists and startRow not specified, startRow is calculated\n        //automatically by EditTable\n        if (thead.length > 0 && !cfg.startRow) {\n            startRow = undefined;\n        }\n        //otherwise startRow config property if any or TableFilter refRow\n        else {\n            startRow = cfg.startRow || tf.refRow;\n        }\n\n        cfg.base_path = cfg.base_path || tf.basePath + 'ezEditTable/';\n        let editable = cfg.editable;\n        let selectable = cfg.selection;\n\n        if (selectable) {\n            cfg.default_selection = cfg.default_selection || 'row';\n        }\n        //CSS Styles\n        cfg.active_cell_css = cfg.active_cell_css || 'ezETSelectedCell';\n\n        let _lastValidRowIndex = 0;\n        let _lastRowIndex = 0;\n\n        if (selectable) {\n            //Row navigation needs to be calculated according to TableFilter's\n            //validRowsIndex array\n            let onAfterSelection = function (et, selectedElm, e) {\n                let slc = et.Selection;\n                //Next valid filtered row needs to be selected\n                let doSelect = function (nextRowIndex) {\n                    if (et.defaultSelection === 'row') {\n                        /* eslint-disable */\n                        slc.SelectRowByIndex(nextRowIndex);\n                        /* eslint-enable */\n                    } else {\n                        /* eslint-disable */\n                        et.ClearSelections();\n                        /* eslint-enable */\n                        let cellIndex = selectedElm.cellIndex,\n                            row = tf.dom().rows[nextRowIndex];\n                        if (et.defaultSelection === 'both') {\n                            /* eslint-disable */\n                            slc.SelectRowByIndex(nextRowIndex);\n                            /* eslint-enable */\n                        }\n                        if (row) {\n                            /* eslint-disable */\n                            slc.SelectCell(row.cells[cellIndex]);\n                            /* eslint-enable */\n                        }\n                    }\n                    //Table is filtered\n                    if (tf.validRowsIndex.length !== tf.getRowsNb()) {\n                        let r = tf.dom().rows[nextRowIndex];\n                        if (r) {\n                            r.scrollIntoView(false);\n                        }\n                        if (cell) {\n                            if (cell.cellIndex === (tf.getCellsNb() - 1) &&\n                                tf.gridLayout) {\n                                tf.tblCont.scrollLeft = 100000000;\n                            }\n                            else if (cell.cellIndex === 0 && tf.gridLayout) {\n                                tf.tblCont.scrollLeft = 0;\n                            } else {\n                                cell.scrollIntoView(false);\n                            }\n                        }\n                    }\n                };\n\n                //table is not filtered\n                if (!tf.validRowsIndex) {\n                    return;\n                }\n                let validIndexes = tf.validRowsIndex,\n                    validIdxLen = validIndexes.length,\n                    row = et.defaultSelection !== 'row' ?\n                        selectedElm.parentNode : selectedElm,\n                    //cell for default_selection = 'both' or 'cell'\n                    cell = selectedElm.nodeName === 'TD' ? selectedElm : null,\n                    /* eslint-disable */\n                    keyCode = e !== undefined ? et.Event.GetKey(e) : 0,\n                    /* eslint-enable */\n                    isRowValid = validIndexes.indexOf(row.rowIndex) !== -1,\n                    nextRowIndex,\n                    paging = tf.feature('paging'),\n                    //pgup/pgdown keys\n                    d = keyCode === 34 || keyCode === 33 ?\n                        (paging && paging.pagingLength || et.nbRowsPerPage) :\n                        1;\n\n                //If next row is not valid, next valid filtered row needs to be\n                //calculated\n                if (!isRowValid) {\n                    //Selection direction up/down\n                    if (row.rowIndex > _lastRowIndex) {\n                        //last row\n                        if (row.rowIndex >= validIndexes[validIdxLen - 1]) {\n                            nextRowIndex = validIndexes[validIdxLen - 1];\n                        } else {\n                            let calcRowIndex = (_lastValidRowIndex + d);\n                            if (calcRowIndex > (validIdxLen - 1)) {\n                                nextRowIndex = validIndexes[validIdxLen - 1];\n                            } else {\n                                nextRowIndex = validIndexes[calcRowIndex];\n                            }\n                        }\n                    } else {\n                        //first row\n                        if (row.rowIndex <= validIndexes[0]) {\n                            nextRowIndex = validIndexes[0];\n                        } else {\n                            let v = validIndexes[_lastValidRowIndex - d];\n                            nextRowIndex = v ? v : validIndexes[0];\n                        }\n                    }\n                    _lastRowIndex = row.rowIndex;\n                    doSelect(nextRowIndex);\n                } else {\n                    //If filtered row is valid, special calculation for\n                    //pgup/pgdown keys\n                    if (keyCode !== 34 && keyCode !== 33) {\n                        _lastValidRowIndex = validIndexes.indexOf(row.rowIndex);\n                        _lastRowIndex = row.rowIndex;\n                    } else {\n                        if (keyCode === 34) { //pgdown\n                            //last row\n                            if ((_lastValidRowIndex + d) <= (validIdxLen - 1)) {\n                                nextRowIndex = validIndexes[\n                                    _lastValidRowIndex + d];\n                            } else {\n                                nextRowIndex = [validIdxLen - 1];\n                            }\n                        } else { //pgup\n                            //first row\n                            if ((_lastValidRowIndex - d) <= validIndexes[0]) {\n                                nextRowIndex = validIndexes[0];\n                            } else {\n                                nextRowIndex = validIndexes[\n                                    _lastValidRowIndex - d];\n                            }\n                        }\n                        _lastRowIndex = nextRowIndex;\n                        _lastValidRowIndex = validIndexes.indexOf(nextRowIndex);\n                        doSelect(nextRowIndex);\n                    }\n                }\n            };\n\n            //Page navigation has to be enforced whenever selected row is out of\n            //the current page range\n            let onBeforeSelection = function (et, selectedElm) {\n                let row = et.defaultSelection !== 'row' ?\n                    selectedElm.parentNode : selectedElm;\n                if (tf.paging) {\n                    if (tf.feature('paging').nbPages > 1) {\n                        let paging = tf.feature('paging');\n                        //page length is re-assigned in case it has changed\n                        et.nbRowsPerPage = paging.pagingLength;\n                        let validIndexes = tf.validRowsIndex,\n                            validIdxLen = validIndexes.length,\n                            pagingEndRow = parseInt(paging.startPagingRow, 10) +\n                                parseInt(paging.pagingLength, 10);\n                        let rowIndex = row.rowIndex;\n\n                        if ((rowIndex === validIndexes[validIdxLen - 1]) &&\n                            paging.currentPageNb !== paging.nbPages) {\n                            paging.setPage('last');\n                        }\n                        else if ((rowIndex === validIndexes[0]) &&\n                            paging.currentPageNb !== 1) {\n                            paging.setPage('first');\n                        }\n                        else if (rowIndex > validIndexes[pagingEndRow - 1] &&\n                            rowIndex < validIndexes[validIdxLen - 1]) {\n                            paging.setPage('next');\n                        }\n                        else if (\n                            rowIndex < validIndexes[paging.startPagingRow] &&\n                            rowIndex > validIndexes[0]) {\n                            paging.setPage('previous');\n                        }\n                    }\n                }\n            };\n\n            //Selected row needs to be visible when paging is activated\n            if (tf.paging) {\n                tf.feature('paging').onAfterChangePage = function (paging) {\n                    let advGrid = paging.tf.extension('advancedGrid');\n                    let et = advGrid._ezEditTable;\n                    let slc = et.Selection;\n                    /* eslint-disable */\n                    let row = slc.GetActiveRow();\n                    /* eslint-enable */\n                    if (row) {\n                        row.scrollIntoView(false);\n                    }\n                    /* eslint-disable */\n                    let cell = slc.GetActiveCell();\n                    /* eslint-enable */\n                    if (cell) {\n                        cell.scrollIntoView(false);\n                    }\n                };\n            }\n\n            //Rows navigation when rows are filtered is performed with the\n            //EditTable row selection callback events\n            if (cfg.default_selection === 'row') {\n                let fnB = cfg.on_before_selected_row;\n                cfg.on_before_selected_row = function () {\n                    var args = arguments;\n                    onBeforeSelection(args[0], args[1], args[2]);\n                    if (fnB) {\n                        fnB.call(null, args[0], args[1], args[2]);\n                    }\n                };\n                let fnA = cfg.on_after_selected_row;\n                cfg.on_after_selected_row = function () {\n                    var args = arguments;\n                    onAfterSelection(args[0], args[1], args[2]);\n                    if (fnA) {\n                        fnA.call(null, args[0], args[1], args[2]);\n                    }\n                };\n            } else {\n                let fnD = cfg.on_before_selected_cell;\n                cfg.on_before_selected_cell = function () {\n                    var args = arguments;\n                    onBeforeSelection(args[0], args[1], args[2]);\n                    if (fnD) {\n                        fnD.call(null, args[0], args[1], args[2]);\n                    }\n                };\n                let fnC = cfg.on_after_selected_cell;\n                cfg.on_after_selected_cell = function () {\n                    var args = arguments;\n                    onAfterSelection(args[0], args[1], args[2]);\n                    if (fnC) {\n                        fnC.call(null, args[0], args[1], args[2]);\n                    }\n                };\n            }\n        }\n        if (editable) {\n            //Added or removed rows, TF rows number needs to be re-calculated\n            let fnE = cfg.on_added_dom_row;\n            cfg.on_added_dom_row = function () {\n                var args = arguments;\n                tf.nbFilterableRows++;\n                if (!tf.paging) {\n                    tf.emitter.emit('rows-changed', tf, this);\n                } else {\n                    tf.nbFilterableRows++;\n                    tf.paging = false;\n                    tf.feature('paging').destroy();\n                    tf.feature('paging').reset();\n                }\n                if (tf.alternateRows) {\n                    tf.feature('alternateRows').init();\n                }\n                if (fnE) {\n                    fnE.call(null, args[0], args[1], args[2]);\n                }\n            };\n            if (cfg.actions && cfg.actions['delete']) {\n                let fnF = cfg.actions['delete'].on_after_submit;\n                cfg.actions['delete'].on_after_submit = function () {\n                    var args = arguments;\n                    tf.nbFilterableRows--;\n                    if (!tf.paging) {\n                        tf.emitter.emit('rows-changed', tf, this);\n                    } else {\n                        tf.nbFilterableRows--;\n                        tf.paging = false;\n                        tf.feature('paging').destroy();\n                        tf.feature('paging').reset(false);\n                    }\n                    if (tf.alternateRows) {\n                        tf.feature('alternateRows').init();\n                    }\n                    if (fnF) {\n                        fnF.call(null, args[0], args[1]);\n                    }\n                };\n            }\n        }\n\n        try {\n            /* eslint-disable */\n            this._ezEditTable = new EditTable(tf.id, cfg, startRow);\n            this._ezEditTable.Init();\n            /* eslint-enable */\n        } catch (e) { throw new Error(INSTANTIATION_ERROR); }\n\n        this.initialized = true;\n    }\n\n    /**\n     * Reset advanced grid when previously removed\n     */\n    reset() {\n        let ezEditTable = this._ezEditTable;\n        if (ezEditTable) {\n            if (this.cfg.selection) {\n                /* eslint-disable */\n                ezEditTable.Selection.Set();\n                /* eslint-enable */\n            }\n            if (this.cfg.editable) {\n                /* eslint-disable */\n                ezEditTable.Editable.Set();\n                /* eslint-enable */\n            }\n        }\n    }\n\n    /**\n     * Toggle behaviour\n     */\n    toggle() {\n        let ezEditTable = this._ezEditTable;\n        if (ezEditTable.editable) {\n            /* eslint-disable */\n            ezEditTable.Editable.Remove();\n            /* eslint-enable */\n        } else {\n            /* eslint-disable */\n            ezEditTable.Editable.Set();\n            /* eslint-enable */\n        }\n        if (ezEditTable.selection) {\n            /* eslint-disable */\n            ezEditTable.Selection.Remove();\n            /* eslint-enable */\n        } else {\n            /* eslint-disable */\n            ezEditTable.Selection.Set();\n            /* eslint-enable */\n        }\n    }\n\n    _toggleForInputFilter() {\n        let tf = this.tf;\n        if (!tf.getActiveFilterId()) {\n            return;\n        }\n        let colIndex = tf.getColumnIndexFromFilterId(tf.getActiveFilterId());\n        let filterType = tf.getFilterType(colIndex);\n        if (filterType === INPUT) {\n            this.toggle();\n        }\n    }\n\n    /**\n     * Remove advanced grid\n     */\n    destroy() {\n        if (!this.initialized) {\n            return;\n        }\n        let ezEditTable = this._ezEditTable;\n        if (ezEditTable) {\n            if (this.cfg.selection) {\n                /* eslint-disable */\n                ezEditTable.Selection.ClearSelections();\n                ezEditTable.Selection.Remove();\n                /* eslint-enable */\n            }\n            if (this.cfg.editable) {\n                /* eslint-disable */\n                ezEditTable.Editable.Remove();\n                /* eslint-enable */\n            }\n        }\n\n        this.emitter.off(['filter-focus', 'filter-blur'],\n            () => this._toggleForInputFilter());\n        this.initialized = false;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/extensions/advancedGrid/adapterEzEditTable.js","import {Feature} from '../../feature';\nimport {isArray, isFn, isUndef, isObj, EMPTY_FN} from '../../types';\nimport {createElm, elm, getText, tag} from '../../dom';\nimport {addEvt} from '../../event';\nimport {parse as parseNb} from '../../number';\nimport {\n    NONE, CELL_TAG, HEADER_TAG, STRING, NUMBER, DATE, FORMATTED_NUMBER,\n    IP_ADDRESS\n} from '../../const';\n\n/**\n * SortableTable Adapter module\n */\nexport default class AdapterSortableTable extends Feature {\n\n    /**\n     * Creates an instance of AdapterSortableTable\n     * @param {TableFilter} tf TableFilter instance\n     * @param {Object} opts Configuration object\n     */\n    constructor(tf, opts) {\n        super(tf, opts.name);\n\n        /**\n         * Module name\n         * @type {String}\n         */\n        this.name = opts.name;\n\n        /**\n         * Module description\n         * @type {String}\n         */\n        this.desc = opts.description || 'Sortable table';\n\n        /**\n         * Indicate whether table previously sorted\n         * @type {Boolean}\n         * @private\n         */\n        this.sorted = false;\n\n        /**\n         * List of sort type per column basis\n         * @type {Array}\n         */\n        this.sortTypes = isArray(opts.types) ? opts.types : tf.colTypes;\n\n        /**\n         * Column to be sorted at initialization, ie:\n         * sort_col_at_start: [1, true]\n         * @type {Array}\n         */\n        this.sortColAtStart = isArray(opts.sort_col_at_start) ?\n            opts.sort_col_at_start : null;\n\n        /**\n         * Enable asynchronous sort, if triggers are external\n         * @type {Boolean}\n         */\n        this.asyncSort = Boolean(opts.async_sort);\n\n        /**\n         * List of element IDs triggering sort on a per column basis\n         * @type {Array}\n         */\n        this.triggerIds = isArray(opts.trigger_ids) ? opts.trigger_ids : [];\n\n        // edit .sort-arrow.descending / .sort-arrow.ascending in\n        // tablefilter.css to reflect any path change\n        /**\n         * Path to images\n         * @type {String}\n         */\n        this.imgPath = opts.images_path || tf.themesPath;\n\n        /**\n         * Blank image file name\n         * @type {String}\n         */\n        this.imgBlank = opts.image_blank || 'blank.png';\n\n        /**\n         * Css class for sort indicator image\n         * @type {String}\n         */\n        this.imgClassName = opts.image_class_name || 'sort-arrow';\n\n        /**\n         * Css class for ascending sort indicator image\n         * @type {String}\n         */\n        this.imgAscClassName = opts.image_asc_class_name || 'ascending';\n\n        /**\n         * Css class for descending sort indicator image\n         * @type {String}\n         */\n        this.imgDescClassName = opts.image_desc_class_name || 'descending';\n\n        /**\n         * Cell attribute key storing custom value used for sorting\n         * @type {String}\n         */\n        this.customKey = opts.custom_key || 'data-tf-sortKey';\n\n        /**\n         * Callback fired when sort extension is instanciated\n         * @type {Function}\n         */\n        this.onSortLoaded = isFn(opts.on_sort_loaded) ?\n            opts.on_sort_loaded : EMPTY_FN;\n\n        /**\n         * Callback fired before a table column is sorted\n         * @type {Function}\n         */\n        this.onBeforeSort = isFn(opts.on_before_sort) ?\n            opts.on_before_sort : EMPTY_FN;\n\n        /**\n         * Callback fired after a table column is sorted\n         * @type {Function}\n         */\n        this.onAfterSort = isFn(opts.on_after_sort) ?\n            opts.on_after_sort : EMPTY_FN;\n\n        /**\n         * SortableTable instance\n         * @private\n         */\n        this.stt = null;\n\n        this.enable();\n    }\n\n    /**\n     * Initializes AdapterSortableTable instance\n     */\n    init() {\n        if (this.initialized) {\n            return;\n        }\n        let tf = this.tf;\n        let adpt = this;\n\n        // SortableTable class sanity check (sortabletable.js)\n        if (isUndef(SortableTable)) {\n            throw new Error('SortableTable class not found.');\n        }\n\n        // Add any date format if needed\n        this.emitter.emit('add-date-type-formats', this.tf, this.sortTypes);\n\n        this.overrideSortableTable();\n        this.setSortTypes();\n\n        this.onSortLoaded(tf, this);\n\n        /*** SortableTable callbacks ***/\n        this.stt.onbeforesort = function () {\n            adpt.onBeforeSort(tf, adpt.stt.sortColumn);\n\n            /*** sort behaviour for paging ***/\n            if (tf.paging) {\n                tf.feature('paging').disable();\n            }\n        };\n\n        this.stt.onsort = function () {\n            adpt.sorted = true;\n\n            //sort behaviour for paging\n            if (tf.paging) {\n                let paginator = tf.feature('paging');\n                // recalculate valid rows index as sorting may have change it\n                tf.getValidRows(true);\n                paginator.enable();\n                paginator.setPage(paginator.getPage());\n            }\n\n            adpt.onAfterSort(tf, adpt.stt.sortColumn, adpt.stt.descending);\n            adpt.emitter.emit('column-sorted', tf, adpt.stt.sortColumn,\n                adpt.stt.descending);\n        };\n\n        // Column sort at start\n        let sortColAtStart = adpt.sortColAtStart;\n        if (sortColAtStart) {\n            this.stt.sort(sortColAtStart[0], sortColAtStart[1]);\n        }\n\n        this.emitter.on(['sort'],\n            (tf, colIdx, desc) => this.sortByColumnIndex(colIdx, desc));\n\n        /** @inherited */\n        this.initialized = true;\n\n        this.emitter.emit('sort-initialized', tf, this);\n    }\n\n    /**\n     * Sort specified column\n     * @param {Number} colIdx Column index\n     * @param {Boolean} desc Optional: descending manner\n     */\n    sortByColumnIndex(colIdx, desc) {\n        this.stt.sort(colIdx, desc);\n    }\n\n    /**\n     * Set SortableTable overrides for TableFilter integration\n     */\n    overrideSortableTable() {\n        let adpt = this,\n            tf = this.tf;\n\n        /**\n         * Overrides headerOnclick method in order to handle th event\n         * @param  {Object} e [description]\n         */\n        SortableTable.prototype.headerOnclick = function (evt) {\n            if (!adpt.initialized) {\n                return;\n            }\n\n            // find Header element\n            let el = evt.target || evt.srcElement;\n\n            while (el.tagName !== CELL_TAG && el.tagName !== HEADER_TAG) {\n                el = el.parentNode;\n            }\n\n            this.sort(\n                SortableTable.msie ?\n                    SortableTable.getCellIndex(el) : el.cellIndex\n            );\n        };\n\n        /**\n         * Overrides getCellIndex IE returns wrong cellIndex when columns are\n         * hidden\n         * @param  {Object} oTd TD element\n         * @return {Number}     Cell index\n         */\n        SortableTable.getCellIndex = function (oTd) {\n            let cells = oTd.parentNode.cells,\n                l = cells.length, i;\n            for (i = 0; cells[i] !== oTd && i < l; i++) { }\n            return i;\n        };\n\n        /**\n         * Overrides initHeader in order to handle filters row position\n         * @param  {Array} oSortTypes\n         */\n        SortableTable.prototype.initHeader = function (oSortTypes) {\n            let stt = this;\n            if (!stt.tHead) {\n                if (tf.gridLayout) {\n                    stt.tHead = tf.feature('gridLayout').headTbl.tHead;\n                } else {\n                    return;\n                }\n            }\n\n            stt.headersRow = tf.headersRow;\n            let cells = stt.tHead.rows[stt.headersRow].cells;\n            stt.sortTypes = oSortTypes || [];\n            let l = cells.length;\n            let img, c;\n\n            for (let i = 0; i < l; i++) {\n                c = cells[i];\n                if (stt.sortTypes[i] !== null && stt.sortTypes[i] !== 'None') {\n                    c.style.cursor = 'pointer';\n                    img = createElm('img',\n                        ['src', adpt.imgPath + adpt.imgBlank]);\n                    c.appendChild(img);\n                    if (stt.sortTypes[i] !== null) {\n                        c.setAttribute('_sortType', stt.sortTypes[i]);\n                    }\n                    addEvt(c, 'click', stt._headerOnclick);\n                } else {\n                    c.setAttribute('_sortType', oSortTypes[i]);\n                    c._sortType = 'None';\n                }\n            }\n            stt.updateHeaderArrows();\n        };\n\n        /**\n         * Overrides updateHeaderArrows in order to handle arrows indicators\n         */\n        SortableTable.prototype.updateHeaderArrows = function () {\n            let stt = this;\n            let cells, l, img;\n\n            // external headers\n            if (adpt.asyncSort && adpt.triggerIds.length > 0) {\n                let triggers = adpt.triggerIds;\n                cells = [];\n                l = triggers.length;\n                for (let j = 0; j < l; j++) {\n                    cells.push(elm(triggers[j]));\n                }\n            } else {\n                if (!this.tHead) {\n                    return;\n                }\n                cells = stt.tHead.rows[stt.headersRow].cells;\n                l = cells.length;\n            }\n            for (let i = 0; i < l; i++) {\n                let cell = cells[i];\n                if (!cell) {\n                    continue;\n                }\n                let cellAttr = cell.getAttribute('_sortType');\n                if (cellAttr !== null && cellAttr !== 'None') {\n                    img = cell.lastChild || cell;\n                    if (img.nodeName.toLowerCase() !== 'img') {\n                        img = createElm('img',\n                            ['src', adpt.imgPath + adpt.imgBlank]);\n                        cell.appendChild(img);\n                    }\n                    if (i === stt.sortColumn) {\n                        img.className = adpt.imgClassName + ' ' +\n                            (this.descending ?\n                                adpt.imgDescClassName :\n                                adpt.imgAscClassName);\n                    } else {\n                        img.className = adpt.imgClassName;\n                    }\n                }\n            }\n        };\n\n        /**\n         * Overrides getRowValue for custom key value feature\n         * @param  {Object} oRow    Row element\n         * @param  {String} sType\n         * @param  {Number} nColumn\n         * @return {String}\n         */\n        SortableTable.prototype.getRowValue = function (oRow, sType, nColumn) {\n            let stt = this;\n            // if we have defined a custom getRowValue use that\n            let sortTypeInfo = stt._sortTypeInfo[sType];\n            if (sortTypeInfo && sortTypeInfo.getRowValue) {\n                return sortTypeInfo.getRowValue(oRow, nColumn);\n            }\n            let c = oRow.cells[nColumn];\n            let s = SortableTable.getInnerText(c);\n            return stt.getValueFromString(s, sType);\n        };\n\n        /**\n         * Overrides getInnerText in order to avoid Firefox unexpected sorting\n         * behaviour with untrimmed text elements\n         * @param  {Object} oNode DOM element\n         * @return {String}       DOM element inner text\n         */\n        SortableTable.getInnerText = function (oNode) {\n            if (!oNode) {\n                return;\n            }\n            if (oNode.getAttribute(adpt.customKey)) {\n                return oNode.getAttribute(adpt.customKey);\n            } else {\n                return getText(oNode);\n            }\n        };\n    }\n\n    /**\n     * Adds a sort type\n     */\n    addSortType(...args) {\n        // Extract the arguments\n        let [id, caster, sorter] = args;\n        SortableTable.prototype.addSortType(id, caster, sorter);\n    }\n\n    /**\n     * Sets the sort types on a column basis\n     * @private\n     */\n    setSortTypes() {\n        let tf = this.tf,\n            sortTypes = this.sortTypes,\n            _sortTypes = [];\n\n        for (let i = 0; i < tf.nbCells; i++) {\n            let colType;\n            if (sortTypes[i]) {\n                colType = sortTypes[i];\n                if (isObj(colType)) {\n                    if (colType.type === DATE) {\n                        colType = this._addDateType(i, sortTypes);\n                    }\n                    else if (colType.type === FORMATTED_NUMBER) {\n                        let decimal = colType.decimal || tf.decimalSeparator;\n                        colType = this._addNumberType(i, decimal);\n                    }\n                } else {\n                    colType = colType.toLowerCase();\n                    if (colType === DATE) {\n                        colType = this._addDateType(i, sortTypes);\n                    }\n                    else if (colType === FORMATTED_NUMBER ||\n                        colType === NUMBER) {\n                        colType = this._addNumberType(i, tf.decimalSeparator);\n                    }\n                    else if (colType === NONE) {\n                        // TODO: normalise 'none' vs 'None'\n                        colType = 'None';\n                    }\n                }\n            } else {\n                colType = STRING;\n            }\n            _sortTypes.push(colType);\n        }\n\n        //Public TF method to add sort type\n\n        //Custom sort types\n        this.addSortType('caseinsensitivestring', SortableTable.toUpperCase);\n        this.addSortType(STRING);\n        this.addSortType(IP_ADDRESS, ipAddress, sortIP);\n\n        this.stt = new SortableTable(tf.dom(), _sortTypes);\n\n        /*** external table headers adapter ***/\n        if (this.asyncSort && this.triggerIds.length > 0) {\n            let triggers = this.triggerIds;\n            for (let j = 0; j < triggers.length; j++) {\n                if (triggers[j] === null) {\n                    continue;\n                }\n                let trigger = elm(triggers[j]);\n                if (trigger) {\n                    trigger.style.cursor = 'pointer';\n\n                    addEvt(trigger, 'click', (evt) => {\n                        let elm = evt.target;\n                        if (!this.tf.sort) {\n                            return;\n                        }\n                        this.stt.asyncSort(triggers.indexOf(elm.id));\n                    });\n                    trigger.setAttribute('_sortType', _sortTypes[j]);\n                }\n            }\n        }\n    }\n\n    _addDateType(colIndex, types) {\n        let tf = this.tf;\n        let dateType = tf.feature('dateType');\n        let locale = dateType.getOptions(colIndex, types).locale || tf.locale;\n        let colType = `${DATE}-${locale}`;\n\n        this.addSortType(colType, (value) => {\n            let parsedDate = dateType.parse(value, locale);\n            // Invalid date defaults to Wed Feb 04 -768 11:00:00\n            return isNaN(+parsedDate) ? new Date(-86400000000000) : parsedDate;\n        });\n        return colType;\n    }\n\n    _addNumberType(colIndex, decimal) {\n        let colType = `${FORMATTED_NUMBER}${decimal === '.' ? '' : '-custom'}`;\n\n        this.addSortType(colType, (value) => {\n            return parseNb(value, decimal);\n        });\n        return colType;\n    }\n\n    /**\n     * Remove extension\n     */\n    destroy() {\n        if (!this.initialized) {\n            return;\n        }\n        let tf = this.tf;\n        this.emitter.off(['sort'],\n            (tf, colIdx, desc) => this.sortByColumnIndex(colIdx, desc));\n        this.sorted = false;\n        this.stt.destroy();\n\n        let ids = tf.getFiltersId();\n        for (let idx = 0; idx < ids.length; idx++) {\n            let header = tf.getHeaderElement(idx);\n            let img = tag(header, 'img');\n\n            if (img.length === 1) {\n                header.removeChild(img[0]);\n            }\n        }\n        this.initialized = false;\n    }\n\n}\n\n//Converters\nfunction ipAddress(value) {\n    let vals = value.split('.');\n    for (let x in vals) {\n        let val = vals[x];\n        while (3 > val.length) {\n            val = '0' + val;\n        }\n        vals[x] = val;\n    }\n    return vals.join('.');\n}\n\nfunction sortIP(a, b) {\n    let aa = ipAddress(a.value.toLowerCase());\n    let bb = ipAddress(b.value.toLowerCase());\n    if (aa === bb) {\n        return 0;\n    } else if (aa < bb) {\n        return -1;\n    } else {\n        return 1;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/extensions/sort/adapterSortabletable.js","import AdapterEzEditTable from './adapterEzEditTable';\n\nexport default AdapterEzEditTable;\n\n\n// WEBPACK FOOTER //\n// ./src/extensions/advancedGrid/advancedGrid.js","import {Feature} from '../../feature';\nimport {createText, elm} from '../../dom';\nimport {isArray, isFn, isUndef, isEmpty, EMPTY_FN} from '../../types';\nimport {numSortAsc} from '../../sort';\nimport {FORMATTED_NUMBER} from '../../const';\nimport formatNumber from 'format-number';\n\nconst EVENTS = [\n    'after-filtering',\n    'after-page-change',\n    'after-page-length-change'\n];\n\nconst SUM = 'sum';\nconst MEAN = 'mean';\nconst MIN = 'min';\nconst MAX = 'max';\nconst MEDIAN = 'median';\nconst Q1 = 'q1';\nconst Q3 = 'q3';\n\n/**\n * Column calculations extension\n */\nexport default class ColOps extends Feature {\n\n    /**\n     * Creates an instance of ColOps\n     *\n     * @param {TableFilter} tf TableFilter instance\n     * @param {Object} opts Configuration object\n     */\n    constructor(tf, opts) {\n        super(tf, opts.name);\n\n        /**\n         * Callback fired before columns operations start\n         * @type {Function}\n         */\n        this.onBeforeOperation = isFn(opts.on_before_operation) ?\n            opts.on_before_operation : EMPTY_FN;\n\n        /**\n         * Callback fired after columns operations are completed\n         * @type {Function}\n         */\n        this.onAfterOperation = isFn(opts.on_after_operation) ?\n            opts.on_after_operation : EMPTY_FN;\n\n        /**\n         * Configuration options\n         * @type {Object}\n         */\n        this.opts = opts;\n\n        /**\n         * List of DOM element IDs containing column's calculation result\n         * @type {Array}\n         */\n        this.labelIds = opts.id || [];\n\n        /**\n         * List of columns' indexes for calculations\n         * @type {Array}\n         */\n        this.colIndexes = opts.col || [];\n\n        /**\n         * List of operations - possible values: 'sum', 'mean', 'min', 'max',\n         * 'median', 'q1', 'q3'\n         * @type {Array}\n         */\n        this.operations = opts.operation || [];\n\n        /**\n         * List of write methods used to write the result - possible values:\n         * 'innerHTML', 'setValue', 'createTextNode'\n         * @type {Array}\n         */\n        this.outputTypes = opts.write_method || [];\n\n        /**\n         * List of format objects used for formatting the result -\n         * refer to https://github.com/componitable/format-number to check\n         * configuration options\n         * @type {Array}\n         */\n        this.formatResults = opts.format_result || [];\n\n        /**\n         * List of row indexes displaying the results\n         * @type {Array}\n         */\n        this.totRowIndexes = opts.tot_row_index || [];\n\n        /**\n         * List of row indexes excluded from calculations\n         * @type {Array}\n         */\n        this.excludeRows = opts.exclude_row || [];\n\n        /**\n         * List of decimal precision for calculation results\n         * @type {Array}\n         */\n        this.decimalPrecisions = isUndef(opts.decimal_precision) ?\n                2 : opts.decimal_precision;\n\n        this.enable();\n    }\n\n    /**\n     * Initializes ColOps instance\n     */\n    init() {\n        if (this.initialized) {\n            return;\n        }\n        // subscribe to events\n        this.emitter.on(EVENTS, () => this.calcAll());\n\n        this.calcAll();\n\n        /** @inherited */\n        this.initialized = true;\n    }\n\n    /**\n     * Calculates columns' values\n     * Configuration options are stored in 'opts' property\n     * - 'id' contains ids of elements showing result (array)\n     * - 'col' contains the columns' indexes (array)\n     * - 'operation' contains operation type (array, values: 'sum', 'mean',\n     *   'min', 'max', 'median', 'q1', 'q3')\n     * - 'write_method' array defines which method to use for displaying the\n     *    result (innerHTML, setValue, createTextNode) - default: 'innerHTML'\n     * - 'tot_row_index' defines in which row results are displayed\n     *   (integers array)\n     *\n     * - changes made by Nuovella:\n     * (1) optimized the routine (now it will only process each column once),\n     * (2) added calculations for the median, lower and upper quartile.\n     */\n    calcAll() {\n        let tf = this.tf;\n        if (!tf.isInitialized()) {\n            return;\n        }\n\n        this.onBeforeOperation(tf, this);\n        this.emitter.emit('before-column-operation', tf, this);\n\n        let { colIndexes, operations: colOperations, outputTypes,\n            totRowIndexes, excludeRows, formatResults } = this;\n        let decimalPrecisions = isUndef(this.decimalPrecisions) ?\n                2 : this.decimalPrecisions;\n\n        //nuovella: determine unique list of columns to operate on\n        let uIndexes = [];\n        colIndexes.forEach((val) => {\n            if (uIndexes.indexOf(val) === -1) {\n                uIndexes.push(val);\n            }\n        });\n\n        let nbCols = uIndexes.length,\n            rows = tf.dom().rows,\n            colValues = [];\n\n        for (let u = 0; u < nbCols; u++) {\n            //this retrieves col values\n            //use uIndexes because we only want to pass through this loop\n            //once for each column get the values in this unique column\n            colValues.push(\n                tf.getVisibleColumnData(uIndexes[u], false, excludeRows)\n            );\n\n            let curValues = colValues[u];\n\n            //next: calculate all operations for this column\n            let result = 0,\n                operations = [],\n                precisions = [],\n                labels = [],\n                writeType,\n                formatResult = [],\n                idx = 0;\n\n            for (let k = 0; k < colIndexes.length; k++) {\n                if (colIndexes[k] !== uIndexes[u]) {\n                    continue;\n                }\n                operations[idx] = (colOperations[k] || 'sum').toLowerCase();\n                precisions[idx] = decimalPrecisions[k];\n                labels[idx] = this.labelIds[k];\n                writeType = isArray(outputTypes) ? outputTypes[k] : null;\n                formatResult[idx] =\n                    this.configureFormat(uIndexes[u], formatResults[k]);\n                idx++;\n            }\n\n            for (let i = 0; i < idx; i++) {\n                // emit values before column calculation\n                this.emitter.emit(\n                    'before-column-calc',\n                    tf,\n                    this,\n                    uIndexes[u],\n                    curValues,\n                    operations[i],\n                    precisions[i]\n                );\n\n                result = Number(this.calc(curValues, operations[i], null));\n\n                // emit column calculation result\n                this.emitter.emit(\n                    'column-calc',\n                    tf,\n                    this,\n                    uIndexes[u],\n                    result,\n                    operations[i],\n                    precisions[i]\n                );\n\n                // write result in expected DOM element\n                this.writeResult(\n                    result,\n                    labels[i],\n                    writeType,\n                    precisions[i],\n                    formatResult[i]\n                );\n\n            }//for i\n\n            // row(s) with result are always visible\n            let totRow = totRowIndexes && totRowIndexes[u] ?\n                rows[totRowIndexes[u]] : null;\n            if (totRow) {\n                totRow.style.display = '';\n            }\n        }//for u\n\n        this.onAfterOperation(tf, this);\n        this.emitter.emit('after-column-operation', tf, this);\n    }\n\n    /**\n     * Make desired calculation on specified column.\n     * @param {Number} colIndex Column index\n     * @param {String} [operation=SUM] Operation type\n     * @param {Number} precision Decimal precision\n     * @returns {Number}\n     */\n    columnCalc(colIndex, operation = SUM, precision) {\n        let excludeRows = this.excludeRows || [];\n        let colValues = tf.getVisibleColumnData(colIndex, false, excludeRows);\n\n        return Number(this.calc(colValues, operation, precision));\n    }\n\n    /**\n     * Make calculation on passed values.\n     * @param {Array} values List of values\n     * @param {String} [operation=SUM] Optional operation type\n     * @param {Number} precision Optional result precision\n     * @returns {Number}\n     * @private\n     */\n    calc(colValues, operation = SUM, precision) {\n        let result = 0;\n\n        if (operation === Q1 || operation === Q3 || operation === MEDIAN) {\n            colValues = this.sortColumnValues(colValues, numSortAsc);\n        }\n\n        switch (operation) {\n            case MEAN:\n                result = this.calcMean(colValues);\n                break;\n            case SUM:\n                result = this.calcSum(colValues);\n                break;\n            case MIN:\n                result = this.calcMin(colValues);\n                break;\n            case MAX:\n                result = this.calcMax(colValues);\n                break;\n            case MEDIAN:\n                result = this.calcMedian(colValues);\n                break;\n            case Q1:\n                result = this.calcQ1(colValues);\n                break;\n            case Q3:\n                result = this.calcQ3(colValues);\n                break;\n        }\n\n        return isEmpty(precision) ? result : result.toFixed(precision);\n    }\n\n    /**\n     * Calculate the sum of passed values.\n     * @param {Array} [values=[]] List of values\n     * @returns {Number}\n     */\n    calcSum(values = []) {\n        if (isEmpty(values)) {\n            return 0;\n        }\n        let result = values.reduce((x, y) => Number(x) + Number(y));\n        return result;\n    }\n\n    /**\n     * Calculate the mean of passed values.\n     * @param {Array} [values=[]] List of values\n     * @returns {Number}\n     */\n    calcMean(values = []) {\n        let result = this.calcSum(values) / values.length;\n        return Number(result);\n    }\n\n    /**\n     * Calculate the max value of passed values.\n     * @param {Array} [values=[]] List of values\n     * @returns {Number}\n     */\n    calcMax(values = []) {\n        return Math.max.apply(null, values);\n    }\n\n    /**\n     * Calculate the min value of passed values.\n     * @param {Array} [values=[]] List of values\n     * @returns {Number}\n     */\n    calcMin(values = []) {\n        return Math.min.apply(null, values);\n    }\n\n    /**\n     * Calculate the median of passed values.\n     * @param {Array} [values=[]] List of values\n     * @returns {Number}\n     */\n    calcMedian(values = []) {\n        let nbValues = values.length;\n        let aux = 0;\n        if (nbValues % 2 === 1) {\n            aux = Math.floor(nbValues / 2);\n            return Number(values[aux]);\n        }\n        return (Number(values[nbValues / 2]) +\n            Number(values[((nbValues / 2) - 1)])) / 2;\n    }\n\n    /**\n     * Calculate the lower quartile of passed values.\n     * @param {Array} [values=[]] List of values\n     * @returns {Number}\n     */\n    calcQ1(values = []) {\n        let nbValues = values.length;\n        let posa = 0.0;\n        posa = Math.floor(nbValues / 4);\n        if (4 * posa === nbValues) {\n            return (Number(values[posa - 1]) +\n                Number(values[posa])) / 2;\n        }\n        return Number(values[posa]);\n    }\n\n    /**\n     * Calculate the upper quartile of passed values.\n     * @param {Array} [values=[]] List of values\n     * @returns {Number}\n     */\n    calcQ3(values = []) {\n        let nbValues = values.length;\n        let posa = 0.0;\n        let posb = 0.0;\n        posa = Math.floor(nbValues / 4);\n        if (4 * posa === nbValues) {\n            posb = 3 * posa;\n            return (Number(values[posb]) +\n                Number(values[posb - 1])) / 2;\n        }\n        return Number(values[nbValues - posa - 1]);\n    }\n\n    /**\n     * Sort passed values with supplied sorter function.\n     * @param {Array} [values=[]] List of values to be sorted\n     * @param {Function} sorter Sorter function\n     * @returns {Array}\n     */\n    sortColumnValues(values = [], sorter) {\n        return values.sort(sorter);\n    }\n\n    /**\n     * Write calculation result in passed DOM element with supplied write method\n     * and decimal precision.\n     * @param {Number} [result=0] Calculation result\n     * @param {DOMElement} label DOM element\n     * @param {String} [writeType='innerhtml'] Write method\n     * @param {Number} [precision=2] Applied decimal precision\n     * @private\n     */\n    writeResult(result = 0, label, writeType = 'innerhtml',\n        precision = 2, format = {}) {\n        let labelElm = elm(label);\n\n        if (!labelElm) {\n            return;\n        }\n\n        result = result.toFixed(precision);\n        if (isNaN(result) || !isFinite(result)) {\n            result = '';\n        } else {\n            result = formatNumber(format)(result);\n        }\n\n        switch (writeType.toLowerCase()) {\n            case 'innerhtml':\n                labelElm.innerHTML = result;\n                break;\n            case 'setvalue':\n                labelElm.value = result;\n                break;\n            case 'createtextnode':\n                let oldNode = labelElm.firstChild;\n                let txtNode = createText(result);\n                labelElm.replaceChild(txtNode, oldNode);\n                break;\n        }\n    }\n\n    /**\n     * Configure the format options used to format the operation result based\n     * on column type.\n     * @param {Number} colIndex Column index\n     * @param {Object} [format={}] Format object\n     * @returns {Object}\n     * @private\n     */\n    configureFormat(colIndex, format = {}) {\n        let tf = this.tf;\n        if (tf.hasType(colIndex, [FORMATTED_NUMBER])) {\n            let colType = tf.colTypes[colIndex];\n            if (colType.decimal && !format.decimal) {\n                format.decimal = colType.decimal;\n            }\n            if (colType.thousands && !format.integerSeparator) {\n                format.integerSeparator = colType.thousands;\n            }\n        } else {\n            format.decimal = format.decimal || '';\n            format.integerSeparator = format.integerSeparator || '';\n        }\n        return format;\n    }\n\n    /** Remove extension */\n    destroy() {\n        if (!this.initialized) {\n            return;\n        }\n        // unsubscribe to events\n        this.emitter.off(EVENTS, () => this.calcAll());\n\n        this.initialized = false;\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/extensions/colOps/colOps.js","import {Feature} from '../../feature';\nimport {\n    addClass, removeClass, createCheckItem, createElm, elm, removeElm,\n    getText\n} from '../../dom';\nimport {isFn, EMPTY_FN} from '../../types';\nimport {addEvt, targetEvt, removeEvt} from '../../event';\nimport {root} from '../../root';\n\n/**\n * Columns Visibility extension\n */\nexport default class ColsVisibility extends Feature {\n\n    /**\n     * Creates an instance of ColsVisibility\n     * @param {TableFilter} tf TableFilter instance\n     * @param {Object} Configuration object\n     */\n    constructor(tf, f) {\n        super(tf, f.name);\n\n        // Configuration object\n        let cfg = this.config;\n\n        /**\n         * Module name\n         * @type {String}\n         */\n        this.name = f.name;\n\n        /**\n         * Module description\n         * @type {String}\n         */\n        this.desc = f.description || 'Columns visibility manager';\n\n        /**\n         * show/hide columns container element\n         * @private\n         */\n        this.spanEl = null;\n\n        /**\n         * show/hide columns button element\n         * @private\n         */\n        this.btnEl = null;\n\n        /**\n         * show/hide columns main container element\n         * @private\n         */\n        this.contEl = null;\n\n        /**\n         * Enable tick to hide a column, defaults to true\n         * @type {Boolean}\n         */\n        this.tickToHide = f.tick_to_hide === false ? false : true;\n\n        /**\n         * Enable columns manager UI, defaults to true\n         * @type {Boolean}\n         */\n        this.manager = f.manager === false ? false : true;\n\n        /**\n         * Headers HTML table reference only if headers are external\n         * @type {DOMElement}\n         */\n        this.headersTbl = f.headers_table || null;\n\n        /**\n         * Headers row index only if headers are external\n         * @type {Number}\n         */\n        this.headersIndex = f.headers_index || 1;\n\n        /**\n         * ID of main container element\n         * @type {String}\n         */\n        this.contElTgtId = f.container_target_id || null;\n\n        /**\n         * Alternative text for column headers in column manager UI\n         * @type {Array}\n         */\n        this.headersText = f.headers_text || null;\n\n        /**\n         * ID of button's container element\n         * @type {String}\n         */\n        this.btnTgtId = f.btn_target_id || null;\n\n        /**\n         * Button's text, defaults to Columns&#9660;\n         * @type {String}\n         */\n        this.btnText = f.btn_text || 'Columns&#9660;';\n\n        /**\n         * Button's inner HTML\n         * @type {String}\n         */\n        this.btnHtml = f.btn_html || null;\n\n        /**\n         * Css class for button\n         * @type {String}\n         */\n        this.btnCssClass = f.btn_css_class || 'colVis';\n\n        /**\n         * Columns manager UI close link text, defaults to 'Close'\n         * @type {String}\n         */\n        this.btnCloseText = f.btn_close_text || 'Close';\n\n        /**\n         * Columns manager UI close link HTML\n         * @type {String}\n         */\n        this.btnCloseHtml = f.btn_close_html || null;\n\n        /**\n         * Css for columns manager UI close link\n         * @type {String}\n         */\n        this.btnCloseCssClass = f.btn_close_css_class || this.btnCssClass;\n\n        /**\n         * Extension's stylesheet filename\n         * @type {String}\n         */\n        this.stylesheet = f.stylesheet || 'colsVisibility.css';\n\n        /**\n         * Css for columns manager UI span\n         * @type {String}\n         */\n        this.spanCssClass = f.span_css_class || 'colVisSpan';\n\n        /**\n         * Css for columns manager UI main container\n         * @type {String}\n         */\n        this.contCssClass = f.cont_css_class || 'colVisCont';\n\n        /**\n         * Css for columns manager UI checklist (ul)\n         * @type {String}\n         */\n        this.listCssClass = cfg.list_css_class || 'cols_checklist';\n\n        /**\n         * Css for columns manager UI checklist item (li)\n         * @type {String}\n         */\n        this.listItemCssClass = cfg.checklist_item_css_class ||\n            'cols_checklist_item';\n\n        /**\n         * Css for columns manager UI checklist item selected state (li)\n         * @type {String}\n         */\n        this.listSlcItemCssClass = cfg.checklist_selected_item_css_class ||\n            'cols_checklist_slc_item';\n\n        /**\n         * Text preceding the columns list, defaults to 'Hide' or 'Show'\n         * depending on tick mode (tick_to_hide option)\n         * @type {String}\n         */\n        this.text = f.text || (this.tickToHide ? 'Hide: ' : 'Show: ');\n\n        /**\n         * List of columns indexes to be hidden at initialization\n         * @type {Array}\n         */\n        this.atStart = f.at_start || [];\n\n        /**\n         * Enable hover behaviour on columns manager button/link\n         * @type {Boolean}\n         */\n        this.enableHover = Boolean(f.enable_hover);\n\n        /**\n         * Enable select all option, disabled by default\n         * @type {Boolean}\n         */\n        this.enableTickAll = Boolean(f.enable_tick_all);\n\n        /**\n         * Text for select all option, defaults to 'Select all:'\n         * @type {String}\n         */\n        this.tickAllText = f.tick_all_text || 'Select all:';\n\n        /**\n         * List of indexes of hidden columns\n         * @private\n         */\n        this.hiddenCols = [];\n\n        /**\n         * Bound mouseup wrapper\n         * @private\n         */\n        this.boundMouseup = null;\n\n        /**\n         * Callback fired when the extension is initialized\n         * @type {Function}\n         */\n        this.onLoaded = isFn(f.on_loaded) ? f.on_loaded : EMPTY_FN;\n\n        /**\n         * Callback fired before the columns manager is opened\n         * @type {Function}\n         */\n        this.onBeforeOpen = isFn(f.on_before_open) ?\n            f.on_before_open : EMPTY_FN;\n\n        /**\n         * Callback fired after the columns manager is opened\n         * @type {Function}\n         */\n        this.onAfterOpen = isFn(f.on_after_open) ? f.on_after_open : EMPTY_FN;\n\n        /**\n         * Callback fired before the columns manager is closed\n         * @type {Function}\n         */\n        this.onBeforeClose = isFn(f.on_before_close) ?\n            f.on_before_close : EMPTY_FN;\n\n        /**\n         * Callback fired after the columns manager is closed\n         * @type {Function}\n         */\n        this.onAfterClose = isFn(f.on_after_close) ?\n            f.on_after_close : EMPTY_FN;\n\n        /**\n         * Callback fired before a column is hidden\n         * @type {Function}\n         */\n        this.onBeforeColHidden = isFn(f.on_before_col_hidden) ?\n            f.on_before_col_hidden : EMPTY_FN;\n\n        /**\n         * Callback fired after a column is hidden\n         * @type {Function}\n         */\n        this.onAfterColHidden = isFn(f.on_after_col_hidden) ?\n            f.on_after_col_hidden : EMPTY_FN;\n\n        /**\n         * Callback fired before a column is displayed\n         * @type {Function}\n         */\n        this.onBeforeColDisplayed = isFn(f.on_before_col_displayed) ?\n            f.on_before_col_displayed : EMPTY_FN;\n\n        /**\n         * Callback fired after a column is displayed\n         * @type {Function}\n         */\n        this.onAfterColDisplayed = isFn(f.on_after_col_displayed) ?\n            f.on_after_col_displayed : EMPTY_FN;\n\n        //Grid layout support\n        if (tf.gridLayout) {\n            this.headersTbl = tf.feature('gridLayout').headTbl; //headers table\n            this.headersIndex = 0; //headers index\n            this.onAfterColDisplayed = function () { };\n            this.onAfterColHidden = function () { };\n        }\n\n        //Loads extension stylesheet\n        tf.import(f.name + 'Style', tf.stylePath + this.stylesheet, null,\n            'link');\n\n        this.enable();\n    }\n\n    /**\n     * Mouse-up event handler handling popup auto-close behaviour\n     * @private\n     */\n    onMouseup(evt) {\n        let targetElm = targetEvt(evt);\n\n        while (targetElm && targetElm !== this.contEl\n            && targetElm !== this.btnEl) {\n            targetElm = targetElm.parentNode;\n        }\n\n        if (targetElm !== this.contEl && targetElm !== this.btnEl) {\n            this.toggle();\n        }\n\n        return;\n    }\n\n    /**\n     * Toggle columns manager UI\n     */\n    toggle() {\n        // ensure mouseup event handler is removed\n        removeEvt(root, 'mouseup', this.boundMouseup);\n\n        let contDisplay = this.contEl.style.display;\n\n        if (contDisplay !== 'inline') {\n            this.onBeforeOpen(this);\n        }\n        if (contDisplay === 'inline') {\n            this.onBeforeClose(this);\n        }\n\n        this.contEl.style.display = contDisplay === 'inline' ?\n            'none' : 'inline';\n\n        if (contDisplay !== 'inline') {\n            this.onAfterOpen(this);\n            addEvt(root, 'mouseup', this.boundMouseup);\n        }\n        if (contDisplay === 'inline') {\n            this.onAfterClose(this);\n        }\n    }\n\n    /**\n     * Check an item in columns manager UI\n     * @private\n     */\n    checkItem(lbl) {\n        let li = lbl.parentNode;\n        if (!li || !lbl) {\n            return;\n        }\n        let isChecked = lbl.firstChild.checked;\n        let colIndex = lbl.firstChild.getAttribute('id').split('_')[1];\n        colIndex = parseInt(colIndex, 10);\n        if (isChecked) {\n            addClass(li, this.listSlcItemCssClass);\n        } else {\n            removeClass(li, this.listSlcItemCssClass);\n        }\n\n        let hide = false;\n        if ((this.tickToHide && isChecked) ||\n            (!this.tickToHide && !isChecked)) {\n            hide = true;\n        }\n        this.setHidden(colIndex, hide);\n    }\n\n    /**\n     * Initializes ColsVisibility instance\n     */\n    init() {\n        if (this.initialized || !this.manager) {\n            return;\n        }\n\n        this.emitter.on(['hide-column'],\n            (tf, colIndex) => this.hideCol(colIndex));\n\n        this.buildBtn();\n        this.buildManager();\n\n        /** @inherited */\n        this.initialized = true;\n\n        this.boundMouseup = this.onMouseup.bind(this);\n\n        this.emitter.emit('columns-visibility-initialized', this.tf, this);\n\n        // Hide columns at start at very end of initialization, do not move\n        // as order is important\n        this._hideAtStart();\n    }\n\n    /**\n     * Build main button UI\n     */\n    buildBtn() {\n        if (this.btnEl) {\n            return;\n        }\n        let tf = this.tf;\n        let span = createElm('span');\n        span.className = this.spanCssClass;\n\n        //Container element (rdiv or custom element)\n        if (!this.btnTgtId) {\n            tf.setToolbar();\n        }\n        let targetEl = !this.btnTgtId ? tf.rDiv : elm(this.btnTgtId);\n\n        if (!this.btnTgtId) {\n            let firstChild = targetEl.firstChild;\n            firstChild.parentNode.insertBefore(span, firstChild);\n        } else {\n            targetEl.appendChild(span);\n        }\n\n        if (!this.btnHtml) {\n            let btn = createElm('a', ['href', 'javascript:;']);\n            btn.className = this.btnCssClass;\n            btn.title = this.desc;\n\n            btn.innerHTML = this.btnText;\n            span.appendChild(btn);\n            if (!this.enableHover) {\n                addEvt(btn, 'click', (evt) => this.toggle(evt));\n            } else {\n                addEvt(btn, 'mouseover', (evt) => this.toggle(evt));\n            }\n        } else { //Custom html\n            span.innerHTML = this.btnHtml;\n            let colVisEl = span.firstChild;\n            if (!this.enableHover) {\n                addEvt(colVisEl, 'click', (evt) => this.toggle(evt));\n            } else {\n                addEvt(colVisEl, 'mouseover', (evt) => this.toggle(evt));\n            }\n        }\n\n        this.spanEl = span;\n        this.btnEl = this.spanEl.firstChild;\n\n        this.onLoaded(this);\n    }\n\n    /**\n     * Build columns manager UI\n     */\n    buildManager() {\n        let tf = this.tf;\n\n        let container = !this.contElTgtId ?\n            createElm('div') :\n            elm(this.contElTgtId);\n        container.className = this.contCssClass;\n\n        //Extension description\n        let extNameLabel = createElm('p');\n        extNameLabel.innerHTML = this.text;\n        container.appendChild(extNameLabel);\n\n        //Headers list\n        let ul = createElm('ul');\n        ul.className = this.listCssClass;\n\n        let tbl = this.headersTbl ? this.headersTbl : tf.dom();\n        let headerIndex = this.headersTbl ?\n            this.headersIndex : tf.getHeadersRowIndex();\n        let headerRow = tbl.rows[headerIndex];\n\n        //Tick all option\n        if (this.enableTickAll) {\n            let li = createCheckItem('col__' + tf.id, this.tickAllText,\n                this.tickAllText);\n            addClass(li, this.listItemCssClass);\n            ul.appendChild(li);\n            li.check.checked = !this.tickToHide;\n\n            addEvt(li.check, 'click', () => {\n                for (let h = 0; h < headerRow.cells.length; h++) {\n                    let itm = elm('col_' + h + '_' + tf.id);\n                    if (itm && li.check.checked !== itm.checked) {\n                        itm.click();\n                        itm.checked = li.check.checked;\n                    }\n                }\n            });\n        }\n\n        for (let i = 0; i < headerRow.cells.length; i++) {\n            let cell = headerRow.cells[i];\n            let cellText = this.headersText && this.headersText[i] ?\n                this.headersText[i] : this._getHeaderText(cell);\n            let liElm = createCheckItem('col_' + i + '_' + tf.id, cellText,\n                cellText);\n            addClass(liElm, this.listItemCssClass);\n            if (!this.tickToHide) {\n                addClass(liElm, this.listSlcItemCssClass);\n            }\n            ul.appendChild(liElm);\n            if (!this.tickToHide) {\n                liElm.check.checked = true;\n            }\n\n            addEvt(liElm.check, 'click', (evt) => {\n                let elm = targetEvt(evt);\n                let lbl = elm.parentNode;\n                this.checkItem(lbl);\n            });\n        }\n\n        //separator\n        let p = createElm('p', ['align', 'center']);\n        let btn;\n        //Close link\n        if (!this.btnCloseHtml) {\n            btn = createElm('a', ['href', 'javascript:;']);\n            btn.className = this.btnCloseCssClass;\n            btn.innerHTML = this.btnCloseText;\n            addEvt(btn, 'click', (evt) => this.toggle(evt));\n            p.appendChild(btn);\n        } else {\n            p.innerHTML = this.btnCloseHtml;\n            btn = p.firstChild;\n            addEvt(btn, 'click', (evt) => this.toggle(evt));\n        }\n\n        container.appendChild(ul);\n        container.appendChild(p);\n\n        this.btnEl.parentNode.insertBefore(container, this.btnEl);\n        this.contEl = container;\n    }\n\n    /**\n     * Hide or show specified columns\n     * @param {Number} colIndex Column index\n     * @param {Boolean} hide    Hide column if true or show if false\n     */\n    setHidden(colIndex, hide) {\n        let tf = this.tf;\n        let tbl = tf.dom();\n\n        if (hide) {\n            this.onBeforeColHidden(this, colIndex);\n        }\n        if (!hide) {\n            this.onBeforeColDisplayed(this, colIndex);\n        }\n\n        this._hideCells(tbl, colIndex, hide);\n        if (this.headersTbl) {\n            this._hideCells(this.headersTbl, colIndex, hide);\n        }\n\n        let hiddenCols = this.hiddenCols;\n        let itemIndex = hiddenCols.indexOf(colIndex);\n        if (hide) {\n            if (itemIndex === -1) {\n                this.hiddenCols.push(colIndex);\n            }\n        } else {\n            if (itemIndex !== -1) {\n                this.hiddenCols.splice(itemIndex, 1);\n            }\n        }\n\n        let gridLayout;\n        let headTbl;\n        let gridColElms;\n        if (hide) {\n            //This event is fired just after a column is displayed for\n            //grid_layout support\n            //TODO: grid layout module should be responsible for those\n            //calculations\n            if (tf.gridLayout) {\n                gridLayout = tf.feature('gridLayout');\n                headTbl = gridLayout.headTbl;\n                gridColElms = gridLayout.colElms;\n                let hiddenWidth = parseInt(\n                    gridColElms[colIndex].style.width, 10);\n\n                let headTblW = parseInt(headTbl.style.width, 10);\n                headTbl.style.width = headTblW - hiddenWidth + 'px';\n                tbl.style.width = headTbl.style.width;\n            }\n\n            this.onAfterColHidden(this, colIndex);\n            this.emitter.emit('column-hidden', tf, this, colIndex,\n                this.hiddenCols);\n        }\n\n        if (!hide) {\n            //This event is fired just after a column is displayed for\n            //grid_layout support\n            //TODO: grid layout module should be responsible for those\n            //calculations\n            if (tf.gridLayout) {\n                gridLayout = tf.feature('gridLayout');\n                headTbl = gridLayout.headTbl;\n                gridColElms = gridLayout.colElms;\n                let width = parseInt(gridColElms[colIndex].style.width, 10);\n                headTbl.style.width =\n                    (parseInt(headTbl.style.width, 10) + width) + 'px';\n                tf.dom().style.width = headTbl.style.width;\n            }\n\n            this.onAfterColDisplayed(this, colIndex);\n            this.emitter.emit('column-shown', tf, this, colIndex,\n                this.hiddenCols);\n        }\n    }\n\n    /**\n     * Show specified column\n     * @param  {Number} colIndex Column index\n     */\n    showCol(colIndex) {\n        if (colIndex === undefined || !this.isColHidden(colIndex)) {\n            return;\n        }\n        if (this.manager && this.contEl) {\n            let itm = elm('col_' + colIndex + '_' + this.tf.id);\n            if (itm) {\n                itm.click();\n            }\n        } else {\n            this.setHidden(colIndex, false);\n        }\n    }\n\n    /**\n     * Hide specified column\n     * @param  {Number} colIndex Column index\n     */\n    hideCol(colIndex) {\n        if (colIndex === undefined || this.isColHidden(colIndex)) {\n            return;\n        }\n        if (this.manager && this.contEl) {\n            let itm = elm('col_' + colIndex + '_' + this.tf.id);\n            if (itm) {\n                itm.click();\n            }\n        } else {\n            this.setHidden(colIndex, true);\n        }\n    }\n\n    /**\n     * Determine if specified column is hidden\n     * @param  {Number} colIndex Column index\n     */\n    isColHidden(colIndex) {\n        if (this.hiddenCols.indexOf(colIndex) !== -1) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Toggle visibility of specified column\n     * @param  {Number} colIndex Column index\n     */\n    toggleCol(colIndex) {\n        if (colIndex === undefined || this.isColHidden(colIndex)) {\n            this.showCol(colIndex);\n        } else {\n            this.hideCol(colIndex);\n        }\n    }\n\n    /**\n     * Return the indexes of the columns currently hidden\n     * @return {Array} column indexes\n     */\n    getHiddenCols() {\n        return this.hiddenCols;\n    }\n\n    /**\n     * Remove the columns manager\n     */\n    destroy() {\n        if (!this.initialized) {\n            return;\n        }\n        if (elm(this.contElTgtId)) {\n            elm(this.contElTgtId).innerHTML = '';\n        } else {\n            this.contEl.innerHTML = '';\n            removeElm(this.contEl);\n            this.contEl = null;\n        }\n        this.btnEl.innerHTML = '';\n        removeElm(this.btnEl);\n        this.btnEl = null;\n\n        this.emitter.off(['hide-column'],\n            (tf, colIndex) => this.hideCol(colIndex));\n\n        this.boundMouseup = null;\n\n        this.initialized = false;\n    }\n\n    _getHeaderText(cell) {\n        if (!cell.hasChildNodes) {\n            return '';\n        }\n\n        for (let i = 0; i < cell.childNodes.length; i++) {\n            let n = cell.childNodes[i];\n            if (n.nodeType === 3) {\n                return n.nodeValue;\n            } else if (n.nodeType === 1) {\n                if (n.id && n.id.indexOf('popUp') !== -1) {\n                    continue;\n                } else {\n                    return getText(n);\n                }\n            }\n            continue;\n        }\n        return '';\n    }\n\n    _hideCells(tbl, colIndex, hide) {\n        for (let i = 0; i < tbl.rows.length; i++) {\n            let row = tbl.rows[i];\n            let cell = row.cells[colIndex];\n            if (cell) {\n                cell.style.display = hide ? 'none' : '';\n            }\n        }\n    }\n\n    _hideAtStart() {\n        this.atStart.forEach((colIdx) => {\n            this.hideCol(colIdx);\n        });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/extensions/colsVisibility/colsVisibility.js","import {Feature} from '../../feature';\nimport {createElm, removeElm, elm} from '../../dom';\nimport {isFn, isUndef, EMPTY_FN} from '../../types';\nimport {addEvt} from '../../event';\n\n/**\n * Filters Visibility extension\n */\nexport default class FiltersVisibility extends Feature {\n\n    /**\n     * Creates an instance of FiltersVisibility\n     * @param {TableFilter} tf TableFilter instance\n     * @param {Object} Configuration object\n     */\n    constructor(tf, f) {\n        super(tf, f.name);\n\n        /**\n         * Module name\n         * @type {String}\n         */\n        this.name = f.name;\n\n        /**\n         * Module description\n         * @type {String}\n         */\n        this.desc = f.description || 'Filters row visibility manager';\n\n        /**\n         * Extension's stylesheet filename\n         * @type {String}\n         */\n        this.stylesheet = f.stylesheet || 'filtersVisibility.css';\n\n        /**\n         * Expand icon filename\n         * @type {String}\n         */\n        this.icnExpand = f.expand_icon_name || 'icn_exp.png';\n\n        /**\n         * Collapse icon filename\n         * @type {String}\n         */\n        this.icnCollapse = f.collapse_icon_name || 'icn_clp.png';\n\n        /**\n         * Main container element\n         * @private\n         */\n        this.contEl = null;\n\n        /**\n         * Button element\n         * @private\n         */\n        this.btnEl = null;\n\n        /**\n         * Expand icon HTML\n         * @private\n         */\n        this.icnExpandHtml = '<img src=\"' + tf.themesPath + this.icnExpand +\n            '\" alt=\"Expand filters\" >';\n\n        /**\n         * Collapse icon HTML\n         * @private\n         */\n        this.icnCollapseHtml = '<img src=\"' + tf.themesPath + this.icnCollapse +\n            '\" alt=\"Collapse filters\" >';\n\n        /**\n         * Default text\n         * @private\n         */\n        this.defaultText = 'Toggle filters';\n\n        /**\n         * ID of main container element\n         * @type {String}\n         */\n        this.targetId = f.target_id || null;\n\n        /**\n         * Enable expand/collapse icon, defaults to true\n         * @type {Boolean}\n         */\n        this.enableIcon = f.enable_icon === false ? false : true;\n\n        /**\n         * Custom text for button\n         * @type {String}\n         */\n        this.btnText = f.btn_text || '';\n\n        /**\n         * Collapse button HTML\n         * @private\n         */\n        this.collapseBtnHtml = this.enableIcon ?\n            this.icnCollapseHtml + this.btnText :\n            this.btnText || this.defaultText;\n\n        /**\n         * Expand button HTML\n         * @private\n         */\n        this.expandBtnHtml = this.enableIcon ?\n            this.icnExpandHtml + this.btnText :\n            this.btnText || this.defaultText;\n\n        /**\n         * Button's custom HTML\n         * @type {String}\n         */\n        this.btnHtml = f.btn_html || null;\n\n        /**\n         * Css class for expand/collapse filters button\n         * @type {String}\n         */\n        this.btnCssClass = f.btn_css_class || 'btnExpClpFlt';\n\n        /**\n         * Css class for main container\n         * @type {String}\n         */\n        this.contCssClass = f.cont_css_class || 'expClpFlt';\n\n        /**\n         * Filters row index\n         * @type {Number}\n         */\n        this.filtersRowIndex = !isUndef(f.filters_row_index) ?\n            f.filters_row_index : tf.getFiltersRowIndex();\n\n        /**\n         * Make filters visible at initialization, defaults to true\n         * @type {Boolean}\n         */\n        this.visibleAtStart = !isUndef(f.visible_at_start) ?\n            Boolean(f.visible_at_start) : true;\n\n        /**\n         * Callback fired before filters row is shown\n         * @type {Function}\n         */\n        this.onBeforeShow = isFn(f.on_before_show) ?\n            f.on_before_show : EMPTY_FN;\n\n        /**\n         * Callback fired after filters row is shown\n         * @type {Function}\n         */\n        this.onAfterShow = isFn(f.on_after_show) ? f.on_after_show : EMPTY_FN;\n\n        /**\n         * Callback fired before filters row is hidden\n         * @type {Function}\n         */\n        this.onBeforeHide = isFn(f.on_before_hide) ?\n            f.on_before_hide : EMPTY_FN;\n\n        /**\n         * Callback fired after filters row is hidden\n         * @type {Function}\n         */\n        this.onAfterHide = isFn(f.on_after_hide) ? f.on_after_hide : EMPTY_FN;\n\n        //Import extension's stylesheet\n        tf.import(f.name + 'Style', tf.stylePath + this.stylesheet, null,\n            'link');\n\n        this.enable();\n    }\n\n    /**\n     * Initialise extension\n     */\n    init() {\n        if (this.initialized) {\n            return;\n        }\n\n        this.buildUI();\n\n        /**\n         * @inherited\n         */\n        this.initialized = true;\n\n        this.emitter.on(['show-filters'], (tf, visible) => this.show(visible));\n        this.emitter.emit('filters-visibility-initialized', this.tf, this);\n    }\n\n    /**\n     * Build UI elements\n     */\n    buildUI() {\n        let tf = this.tf;\n        let span = createElm('span');\n        span.className = this.contCssClass;\n\n        //Container element (rdiv or custom element)\n        if (!this.targetId) {\n            tf.setToolbar();\n        }\n        let targetEl = !this.targetId ? tf.rDiv : elm(this.targetId);\n\n        if (!this.targetId) {\n            let firstChild = targetEl.firstChild;\n            firstChild.parentNode.insertBefore(span, firstChild);\n        } else {\n            targetEl.appendChild(span);\n        }\n\n        let btn;\n        if (!this.btnHtml) {\n            btn = createElm('a', ['href', 'javascript:void(0);']);\n            btn.className = this.btnCssClass;\n            btn.title = this.btnText || this.defaultText;\n            btn.innerHTML = this.collapseBtnHtml;\n            span.appendChild(btn);\n        } else { //Custom html\n            span.innerHTML = this.btnHtml;\n            btn = span.firstChild;\n        }\n\n        addEvt(btn, 'click', () => this.toggle());\n\n        this.contEl = span;\n        this.btnEl = btn;\n\n        if (!this.visibleAtStart) {\n            this.toggle();\n        }\n    }\n\n    /**\n     * Toggle filters visibility\n     */\n    toggle() {\n        let tf = this.tf;\n        let tbl = tf.gridLayout ? tf.feature('gridLayout').headTbl : tf.dom();\n        let fltRow = tbl.rows[this.filtersRowIndex];\n        let isDisplayed = fltRow.style.display === '';\n\n        this.show(!isDisplayed);\n    }\n\n    /**\n     * Show or hide filters\n     *\n     * @param {boolean} [visible=true] Visibility flag\n     */\n    show(visible = true) {\n        let tf = this.tf;\n        let tbl = tf.gridLayout ? tf.feature('gridLayout').headTbl : tf.dom();\n        let fltRow = tbl.rows[this.filtersRowIndex];\n\n        if (visible) {\n            this.onBeforeShow(this);\n        }\n        if (!visible) {\n            this.onBeforeHide(this);\n        }\n\n        fltRow.style.display = visible ? '' : 'none';\n        if (this.enableIcon && !this.btnHtml) {\n            this.btnEl.innerHTML = visible ?\n                this.collapseBtnHtml : this.expandBtnHtml;\n        }\n\n        if (visible) {\n            this.onAfterShow(this);\n        }\n        if (!visible) {\n            this.onAfterHide(this);\n        }\n\n        this.emitter.emit('filters-toggled', tf, this, visible);\n    }\n\n    /**\n     * Destroy the UI\n     */\n    destroy() {\n        if (!this.initialized) {\n            return;\n        }\n\n        this.emitter.off(['show-filters'], (tf, visible) => this.show(visible));\n\n        this.btnEl.innerHTML = '';\n        removeElm(this.btnEl);\n        this.btnEl = null;\n\n        this.contEl.innerHTML = '';\n        removeElm(this.contEl);\n        this.contEl = null;\n        this.initialized = false;\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/extensions/filtersVisibility/filtersVisibility.js","import AdapterSortableTable from './adapterSortabletable';\nimport {root} from '../../root';\n\nif (!root.SortableTable) {\n    require('script-loader!sortabletable');\n}\n\nexport default AdapterSortableTable;\n\n\n\n// WEBPACK FOOTER //\n// ./src/extensions/sort/sort.js","\nmodule.exports = formatter;\n\nfunction formatter(options) {\n  options = options || {};\n\n\n  // *********************************************************************************************\n  // Set defaults for negatives\n  // options.negative, options.negativeOut, options.separator retained for backward compatibility\n  // *********************************************************************************************\n\n  // type of negative; default left\n  options.negativeType = options.negativeType || (options.negative === 'R' ? 'right' : 'left')\n\n  // negative symbols '-' or '()'\n  if (typeof options.negativeLeftSymbol !== 'string') {\n    switch (options.negativeType) {\n      case 'left':\n        options.negativeLeftSymbol = '-';\n        break;\n      case 'brackets':\n        options.negativeLeftSymbol = '(';\n        break;\n      default:\n        options.negativeLeftSymbol = '';\n    }\n  }\n  if (typeof options.negativeRightSymbol !== 'string') {\n    switch (options.negativeType) {\n      case 'right':\n        options.negativeRightSymbol = '-';\n        break;\n      case 'brackets':\n        options.negativeRightSymbol = ')';\n        break;\n      default:\n        options.negativeRightSymbol = '';\n    }\n  }\n\n  // whether negative symbol should be inside/outside prefix and suffix\n\n  if (typeof options.negativeLeftOut !== \"boolean\") {\n    options.negativeLeftOut = (options.negativeOut === false ? false : true);\n  }\n  if (typeof options.negativeRightOut !== \"boolean\") {\n    options.negativeRightOut = (options.negativeOut === false ? false : true);\n  }\n\n  //prefix and suffix\n  options.prefix = options.prefix || '';\n  options.suffix = options.suffix || '';\n\n  //separators\n  if (typeof options.integerSeparator !== 'string') {\n    options.integerSeparator = (typeof options.separator === 'string' ? options.separator : ',');\n  }\n  options.decimalsSeparator = typeof options.decimalsSeparator === 'string' ? options.decimalsSeparator : '';\n  options.decimal = options.decimal || '.';\n\n  //padders\n  options.padLeft = options.padLeft || -1 //default no padding\n  options.padRight = options.padRight || -1 //default no padding\n\n  function format(number, overrideOptions) {\n    overrideOptions = overrideOptions || {};\n\n    if (number || number === 0) {\n      number = '' + number;//convert number to string if it isn't already\n    } else {\n      return '';\n    }\n\n    //identify a negative number and make it absolute\n    var output = [];\n    var negative = number.charAt(0) === '-';\n    number = number.replace(/^\\-/g, '');\n\n    //Prepare output with left hand negative and/or prefix\n    if (!options.negativeLeftOut && !overrideOptions.noUnits) {\n      output.push(options.prefix);\n    }\n    if (negative) {\n      output.push(options.negativeLeftSymbol);\n    }\n    if (options.negativeLeftOut && !overrideOptions.noUnits) {\n      output.push(options.prefix);\n    }\n\n    //Format core number\n    number = number.split('.');\n    if (options.round != null) round(number, options.round);\n    if (options.truncate != null) number[1] = truncate(number[1], options.truncate);\n    if (options.padLeft > 0) number[0] = padLeft(number[0], options.padLeft);\n    if (options.padRight > 0) number[1] = padRight(number[1], options.padRight);\n    if (!overrideOptions.noSeparator && number[1]) number[1] = addDecimalSeparators(number[1], options.decimalsSeparator);\n    if (!overrideOptions.noSeparator && number[0]) number[0] = addIntegerSeparators(number[0], options.integerSeparator);\n    output.push(number[0]);\n    if (number[1]) {\n      output.push(options.decimal);\n      output.push(number[1]);\n    }\n\n    //Prepare output with right hand negative and/or prefix\n    if (options.negativeRightOut && !overrideOptions.noUnits) {\n      output.push(options.suffix);\n    }\n    if (negative) {\n      output.push(options.negativeRightSymbol);\n    }\n    if (!options.negativeRightOut && !overrideOptions.noUnits) {\n      output.push(options.suffix);\n    }\n\n    //join output and return\n    return output.join('');\n  }\n\n  format.negative = options.negative;\n  format.negativeOut = options.negativeOut;\n  format.negativeType = options.negativeType;\n  format.negativeLeftOut = options.negativeLeftOut;\n  format.negativeLeftSymbol = options.negativeLeftSymbol;\n  format.negativeRightOut = options.negativeRightOut;\n  format.negativeRightSymbol = options.negativeRightSymbol;\n  format.prefix = options.prefix;\n  format.suffix = options.suffix;\n  format.separate = options.separate;\n  format.integerSeparator = options.integerSeparator;\n  format.decimalsSeparator = options.decimalsSeparator;\n  format.decimal = options.decimal;\n  format.padLeft = options.padLeft;\n  format.padRight = options.padRight;\n  format.truncate = options.truncate;\n  format.round = options.round;\n\n  function unformat(number, allowedSeparators) {\n    allowedSeparators = allowedSeparators || [];\n    if (options.allowedSeparators) {\n      options.allowedSeparators.forEach(function (s) { allowedSeparators.push (s); });\n    }\n    allowedSeparators.push(options.integerSeparator);\n    allowedSeparators.push(options.decimalsSeparator);\n    number = number.replace(options.prefix, '');\n    number = number.replace(options.suffix, '');\n    var newNumber = number;\n    do {\n      number = newNumber;\n      for (var i = 0; i < allowedSeparators.length; i++) {\n        newNumber = newNumber.replace(allowedSeparators[i], '');\n      }\n    } while (newNumber != number);\n    return number;\n  }\n  format.unformat = unformat;\n\n  function validate(number, allowedSeparators) {\n    number = unformat(number, allowedSeparators);\n    number = number.split(options.decimal);\n    if (number.length > 2) {\n      return false;\n    } else if (options.truncate != null && number[1] && number[1].length > options.truncate) {\n      return false;\n    }  else if (options.round != null && number[1] && number[1].length > options.round) {\n      return false;\n    } else {\n      return /^-?\\d+\\.?\\d*$/.test(number);\n    }\n  }\n  return format;\n}\n\n//where x is already the integer part of the number\nfunction addIntegerSeparators(x, separator) {\n  x += '';\n  if (!separator) return x;\n  var rgx = /(\\d+)(\\d{3})/;\n  while (rgx.test(x)) {\n    x = x.replace(rgx, '$1' + separator + '$2');\n  }\n  return x;\n}\n\n//where x is already the decimal part of the number\nfunction addDecimalSeparators(x, separator) {\n  x += '';\n  if (!separator) return x;\n  var rgx = /(\\d{3})(\\d+)/;\n  while (rgx.test(x)) {\n    x = x.replace(rgx, '$1' + separator + '$2');\n  }\n  return x;\n}\n\n//where x is the integer part of the number\nfunction padLeft(x, padding) {\n  x = x + '';\n  var buf = [];\n  while (buf.length + x.length < padding) {\n    buf.push('0');\n  }\n  return buf.join('') + x;\n}\n\n//where x is the decimals part of the number\nfunction padRight(x, padding) {\n  if (x) {\n    x += '';\n  } else {\n    x = '';\n  }\n  var buf = [];\n  while (buf.length + x.length < padding) {\n    buf.push('0');\n  }\n  return x + buf.join('');\n}\nfunction truncate(x, length) {\n  if (x) {\n    x += '';\n  }\n  if (x && x.length > length) {\n    return x.substr(0, length);\n  } else {\n    return x;\n  }\n}\n\n//where number is an array with 0th item as integer string and 1st item as decimal string (no negatives)\nfunction round(number, places) {\n  if (number[1] && places >= 0 && number[1].length > places) {\n    //truncate to correct number of decimal places\n    var decim = number[1].slice(0, places);\n    //if next digit was >= 5 we need to round up\n    if (+(number[1].substr(places, 1)) >= 5) {\n      //But first count leading zeros as converting to a number will loose them\n      var leadingzeros = \"\";\n      while (decim.charAt(0)===\"0\") {\n        leadingzeros = leadingzeros + \"0\";\n        decim = decim.substr(1);\n      }\n      //Then we can change decim to a number and add 1 before replacing leading zeros\n      decim = (+decim + 1) + '';\n      decim = leadingzeros + decim;\n      if (decim.length > places) {\n        //adding one has made it longer\n        number[0] = (+number[0]+ +decim.charAt(0)) + ''; //add value of firstchar to the integer part\n        decim = decim.substring(1);   //ignore the 1st char at the beginning which is the carry to the integer part\n      }\n    }\n    number[1] = decim;\n  }\n  return number;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/format-number/index.js\n// module id = 445\n// module chunks = 0","module.exports = \"/*----------------------------------------------------------------------------\\\\\\n|                            Sortable Table 1.12                              |\\n|-----------------------------------------------------------------------------|\\n|                         Created by Erik Arvidsson                           |\\n|                  (http://webfx.eae.net/contact.html#erik)                   |\\n|                      For WebFX (http://webfx.eae.net/)                      |\\n|-----------------------------------------------------------------------------|\\n| A DOM 1 based script that allows an ordinary HTML table to be sortable.     |\\n|-----------------------------------------------------------------------------|\\n|                  Copyright (c) 1998 - 2006 Erik Arvidsson                   |\\n|-----------------------------------------------------------------------------|\\n| Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not |\\n| use this file except in compliance with the License.  You may obtain a copy |\\n| of the License at http://www.apache.org/licenses/LICENSE-2.0                |\\n| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - |\\n| Unless  required  by  applicable law or  agreed  to  in  writing,  software |\\n| distributed under the License is distributed on an  \\\"AS IS\\\" BASIS,  WITHOUT |\\n| WARRANTIES OR  CONDITIONS OF ANY KIND,  either express or implied.  See the |\\n| License  for the  specific language  governing permissions  and limitations |\\n| under the License.                                                          |\\n|-----------------------------------------------------------------------------|\\n| 2003-01-10 | First version                                                  |\\n| 2003-01-19 | Minor changes to the date parsing                              |\\n| 2003-01-28 | JScript 5.0 fixes (no support for 'in' operator)               |\\n| 2003-02-01 | Sloppy typo like error fixed in getInnerText                   |\\n| 2003-07-04 | Added workaround for IE cellIndex bug.                         |\\n| 2003-11-09 | The bDescending argument to sort was not correctly working     |\\n|            | Using onclick DOM0 event if no support for addEventListener    |\\n|            | or attachEvent                                                 |\\n| 2004-01-13 | Adding addSortType and removeSortType which makes it a lot     |\\n|            | easier to add new, custom sort types.                          |\\n| 2004-01-27 | Switch to use descending = false as the default sort order.    |\\n|            | Change defaultDescending to suit your needs.                   |\\n| 2004-03-14 | Improved sort type None look and feel a bit                    |\\n| 2004-08-26 | Made the handling of tBody and tHead more flexible. Now you    |\\n|            | can use another tHead or no tHead, and you can chose some      |\\n|            | other tBody.                                                   |\\n| 2006-04-25 | Changed license to Apache Software License 2.0                 |\\n|-----------------------------------------------------------------------------|\\n| Created 2003-01-10 | All changes are in the log above. | Updated 2006-04-25 |\\n\\\\----------------------------------------------------------------------------*/\\n\\n\\nfunction SortableTable(oTable, oSortTypes) {\\n\\n\\tthis.sortTypes = oSortTypes || [];\\n\\n\\tthis.sortColumn = null;\\n\\tthis.descending = null;\\n\\n\\tvar oThis = this;\\n\\tthis._headerOnclick = function (e) {\\n\\t\\toThis.headerOnclick(e);\\n\\t};\\n\\n\\tif (oTable) {\\n\\t\\tthis.setTable( oTable );\\n\\t\\tthis.document = oTable.ownerDocument || oTable.document;\\n\\t}\\n\\telse {\\n\\t\\tthis.document = document;\\n\\t}\\n\\n\\n\\t// only IE needs this\\n\\tvar win = this.document.defaultView || this.document.parentWindow;\\n\\tthis._onunload = function () {\\n\\t\\toThis.destroy();\\n\\t};\\n\\tif (win && typeof win.attachEvent != \\\"undefined\\\") {\\n\\t\\twin.attachEvent(\\\"onunload\\\", this._onunload);\\n\\t}\\n}\\n\\nSortableTable.gecko = navigator.product == \\\"Gecko\\\";\\nSortableTable.msie = /msie/i.test(navigator.userAgent);\\n// Mozilla is faster when doing the DOM manipulations on\\n// an orphaned element. MSIE is not\\nSortableTable.removeBeforeSort = SortableTable.gecko;\\n\\nSortableTable.prototype.onsort = function () {};\\n\\n// default sort order. true -> descending, false -> ascending\\nSortableTable.prototype.defaultDescending = false;\\n\\n// shared between all instances. This is intentional to allow external files\\n// to modify the prototype\\nSortableTable.prototype._sortTypeInfo = {};\\n\\nSortableTable.prototype.setTable = function (oTable) {\\n\\tif ( this.tHead )\\n\\t\\tthis.uninitHeader();\\n\\tthis.element = oTable;\\n\\tthis.setTHead( oTable.tHead );\\n\\tthis.setTBody( oTable.tBodies[0] );\\n};\\n\\nSortableTable.prototype.setTHead = function (oTHead) {\\n\\tif (this.tHead && this.tHead != oTHead )\\n\\t\\tthis.uninitHeader();\\n\\tthis.tHead = oTHead;\\n\\tthis.initHeader( this.sortTypes );\\n};\\n\\nSortableTable.prototype.setTBody = function (oTBody) {\\n\\tthis.tBody = oTBody;\\n};\\n\\nSortableTable.prototype.setSortTypes = function ( oSortTypes ) {\\n\\tif ( this.tHead )\\n\\t\\tthis.uninitHeader();\\n\\tthis.sortTypes = oSortTypes || [];\\n\\tif ( this.tHead )\\n\\t\\tthis.initHeader( this.sortTypes );\\n};\\n\\n// adds arrow containers and events\\n// also binds sort type to the header cells so that reordering columns does\\n// not break the sort types\\nSortableTable.prototype.initHeader = function (oSortTypes) {\\n\\tif (!this.tHead) return;\\n\\tvar cells = this.tHead.rows[0].cells;\\n\\tvar doc = this.tHead.ownerDocument || this.tHead.document;\\n\\tthis.sortTypes = oSortTypes || [];\\n\\tvar l = cells.length;\\n\\tvar img, c;\\n\\tfor (var i = 0; i < l; i++) {\\n\\t\\tc = cells[i];\\n\\t\\tif (this.sortTypes[i] != null && this.sortTypes[i] != \\\"None\\\") {\\n\\t\\t\\timg = doc.createElement(\\\"IMG\\\");\\n\\t\\t\\timg.src = \\\"images/blank.png\\\";\\n\\t\\t\\tc.appendChild(img);\\n\\t\\t\\tif (this.sortTypes[i] != null)\\n\\t\\t\\t\\tc._sortType = this.sortTypes[i];\\n\\t\\t\\tif (typeof c.addEventListener != \\\"undefined\\\")\\n\\t\\t\\t\\tc.addEventListener(\\\"click\\\", this._headerOnclick, false);\\n\\t\\t\\telse if (typeof c.attachEvent != \\\"undefined\\\")\\n\\t\\t\\t\\tc.attachEvent(\\\"onclick\\\", this._headerOnclick);\\n\\t\\t\\telse\\n\\t\\t\\t\\tc.onclick = this._headerOnclick;\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tc.setAttribute( \\\"_sortType\\\", oSortTypes[i] );\\n\\t\\t\\tc._sortType = \\\"None\\\";\\n\\t\\t}\\n\\t}\\n\\tthis.updateHeaderArrows();\\n};\\n\\n// remove arrows and events\\nSortableTable.prototype.uninitHeader = function () {\\n\\tif (!this.tHead) return;\\n\\tvar cells = this.tHead.rows[0].cells;\\n\\tvar l = cells.length;\\n\\tvar c;\\n\\tfor (var i = 0; i < l; i++) {\\n\\t\\tc = cells[i];\\n\\t\\tif (c._sortType != null && c._sortType != \\\"None\\\") {\\n\\t\\t\\tc.removeChild(c.lastChild);\\n\\t\\t\\tif (typeof c.removeEventListener != \\\"undefined\\\")\\n\\t\\t\\t\\tc.removeEventListener(\\\"click\\\", this._headerOnclick, false);\\n\\t\\t\\telse if (typeof c.detachEvent != \\\"undefined\\\")\\n\\t\\t\\t\\tc.detachEvent(\\\"onclick\\\", this._headerOnclick);\\n\\t\\t\\tc._sortType = null;\\n\\t\\t\\tc.removeAttribute( \\\"_sortType\\\" );\\n\\t\\t}\\n\\t}\\n};\\n\\nSortableTable.prototype.updateHeaderArrows = function () {\\n\\tif (!this.tHead) return;\\n\\tvar cells = this.tHead.rows[0].cells;\\n\\tvar l = cells.length;\\n\\tvar img;\\n\\tfor (var i = 0; i < l; i++) {\\n\\t\\tif (cells[i]._sortType != null && cells[i]._sortType != \\\"None\\\") {\\n\\t\\t\\timg = cells[i].lastChild;\\n\\t\\t\\tif (i == this.sortColumn)\\n\\t\\t\\t\\timg.className = \\\"sort-arrow \\\" + (this.descending ? \\\"descending\\\" : \\\"ascending\\\");\\n\\t\\t\\telse\\n\\t\\t\\t\\timg.className = \\\"sort-arrow\\\";\\n\\t\\t}\\n\\t}\\n};\\n\\nSortableTable.prototype.headerOnclick = function (e) {\\n\\t// find TD element\\n\\tvar el = e.target || e.srcElement;\\n\\twhile (el.tagName != \\\"TD\\\")\\n\\t\\tel = el.parentNode;\\n\\n\\tthis.sort(SortableTable.msie ? SortableTable.getCellIndex(el) : el.cellIndex);\\n};\\n\\n// IE returns wrong cellIndex when columns are hidden\\nSortableTable.getCellIndex = function (oTd) {\\n\\tvar cells = oTd.parentNode.childNodes\\n\\tvar l = cells.length;\\n\\tvar i;\\n\\tfor (i = 0; cells[i] != oTd && i < l; i++)\\n\\t\\t;\\n\\treturn i;\\n};\\n\\nSortableTable.prototype.getSortType = function (nColumn) {\\n\\treturn this.sortTypes[nColumn] || \\\"String\\\";\\n};\\n\\n// only nColumn is required\\n// if bDescending is left out the old value is taken into account\\n// if sSortType is left out the sort type is found from the sortTypes array\\n\\nSortableTable.prototype.sort = function (nColumn, bDescending, sSortType) {\\n\\tif (!this.tBody) return;\\n\\tif (sSortType == null)\\n\\t\\tsSortType = this.getSortType(nColumn);\\n\\n\\t// exit if None\\n\\tif (sSortType == \\\"None\\\")\\n\\t\\treturn;\\n\\n\\tif (bDescending == null) {\\n\\t\\tif (this.sortColumn != nColumn)\\n\\t\\t\\tthis.descending = this.defaultDescending;\\n\\t\\telse\\n\\t\\t\\tthis.descending = !this.descending;\\n\\t}\\n\\telse\\n\\t\\tthis.descending = bDescending;\\n\\n\\tthis.sortColumn = nColumn;\\n\\n\\tif (typeof this.onbeforesort == \\\"function\\\")\\n\\t\\tthis.onbeforesort();\\n\\n\\tvar f = this.getSortFunction(sSortType, nColumn);\\n\\tvar a = this.getCache(sSortType, nColumn);\\n\\tvar tBody = this.tBody;\\n\\n\\ta.sort(f);\\n\\n\\tif (this.descending)\\n\\t\\ta.reverse();\\n\\n\\tif (SortableTable.removeBeforeSort) {\\n\\t\\t// remove from doc\\n\\t\\tvar nextSibling = tBody.nextSibling;\\n\\t\\tvar p = tBody.parentNode;\\n\\t\\tp.removeChild(tBody);\\n\\t}\\n\\n\\t// insert in the new order\\n\\tvar l = a.length;\\n\\tfor (var i = 0; i < l; i++)\\n\\t\\ttBody.appendChild(a[i].element);\\n\\n\\tif (SortableTable.removeBeforeSort) {\\n\\t\\t// insert into doc\\n\\t\\tp.insertBefore(tBody, nextSibling);\\n\\t}\\n\\n\\tthis.updateHeaderArrows();\\n\\n\\tthis.destroyCache(a);\\n\\n\\tif (typeof this.onsort == \\\"function\\\")\\n\\t\\tthis.onsort();\\n};\\n\\nSortableTable.prototype.asyncSort = function (nColumn, bDescending, sSortType) {\\n\\tvar oThis = this;\\n\\tthis._asyncsort = function () {\\n\\t\\toThis.sort(nColumn, bDescending, sSortType);\\n\\t};\\n\\twindow.setTimeout(this._asyncsort, 1);\\n};\\n\\nSortableTable.prototype.getCache = function (sType, nColumn) {\\n\\tif (!this.tBody) return [];\\n\\tvar rows = this.tBody.rows;\\n\\tvar l = rows.length;\\n\\tvar a = new Array(l);\\n\\tvar r;\\n\\tfor (var i = 0; i < l; i++) {\\n\\t\\tr = rows[i];\\n\\t\\ta[i] = {\\n\\t\\t\\tvalue:\\t\\tthis.getRowValue(r, sType, nColumn),\\n\\t\\t\\telement:\\tr\\n\\t\\t};\\n\\t};\\n\\treturn a;\\n};\\n\\nSortableTable.prototype.destroyCache = function (oArray) {\\n\\tvar l = oArray.length;\\n\\tfor (var i = 0; i < l; i++) {\\n\\t\\toArray[i].value = null;\\n\\t\\toArray[i].element = null;\\n\\t\\toArray[i] = null;\\n\\t}\\n};\\n\\nSortableTable.prototype.getRowValue = function (oRow, sType, nColumn) {\\n\\t// if we have defined a custom getRowValue use that\\n\\tif (this._sortTypeInfo[sType] && this._sortTypeInfo[sType].getRowValue)\\n\\t\\treturn this._sortTypeInfo[sType].getRowValue(oRow, nColumn);\\n\\n\\tvar s;\\n\\tvar c = oRow.cells[nColumn];\\n\\tif (typeof c.innerText != \\\"undefined\\\")\\n\\t\\ts = c.innerText;\\n\\telse\\n\\t\\ts = SortableTable.getInnerText(c);\\n\\treturn this.getValueFromString(s, sType);\\n};\\n\\nSortableTable.getInnerText = function (oNode) {\\n\\tvar s = \\\"\\\";\\n\\tvar cs = oNode.childNodes;\\n\\tvar l = cs.length;\\n\\tfor (var i = 0; i < l; i++) {\\n\\t\\tswitch (cs[i].nodeType) {\\n\\t\\t\\tcase 1: //ELEMENT_NODE\\n\\t\\t\\t\\ts += SortableTable.getInnerText(cs[i]);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\t//TEXT_NODE\\n\\t\\t\\t\\ts += cs[i].nodeValue;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\treturn s;\\n};\\n\\nSortableTable.prototype.getValueFromString = function (sText, sType) {\\n\\tif (this._sortTypeInfo[sType])\\n\\t\\treturn this._sortTypeInfo[sType].getValueFromString( sText );\\n\\treturn sText;\\n\\t/*\\n\\tswitch (sType) {\\n\\t\\tcase \\\"Number\\\":\\n\\t\\t\\treturn Number(sText);\\n\\t\\tcase \\\"CaseInsensitiveString\\\":\\n\\t\\t\\treturn sText.toUpperCase();\\n\\t\\tcase \\\"Date\\\":\\n\\t\\t\\tvar parts = sText.split(\\\"-\\\");\\n\\t\\t\\tvar d = new Date(0);\\n\\t\\t\\td.setFullYear(parts[0]);\\n\\t\\t\\td.setDate(parts[2]);\\n\\t\\t\\td.setMonth(parts[1] - 1);\\n\\t\\t\\treturn d.valueOf();\\n\\t}\\n\\treturn sText;\\n\\t*/\\n\\t};\\n\\nSortableTable.prototype.getSortFunction = function (sType, nColumn) {\\n\\tif (this._sortTypeInfo[sType])\\n\\t\\treturn this._sortTypeInfo[sType].compare;\\n\\treturn SortableTable.basicCompare;\\n};\\n\\nSortableTable.prototype.destroy = function () {\\n\\tthis.uninitHeader();\\n\\tvar win = this.document.parentWindow;\\n\\tif (win && typeof win.detachEvent != \\\"undefined\\\") {\\t// only IE needs this\\n\\t\\twin.detachEvent(\\\"onunload\\\", this._onunload);\\n\\t}\\n\\tthis._onunload = null;\\n\\tthis.element = null;\\n\\tthis.tHead = null;\\n\\tthis.tBody = null;\\n\\tthis.document = null;\\n\\tthis._headerOnclick = null;\\n\\tthis.sortTypes = null;\\n\\tthis._asyncsort = null;\\n\\tthis.onsort = null;\\n};\\n\\n// Adds a sort type to all instance of SortableTable\\n// sType : String - the identifier of the sort type\\n// fGetValueFromString : function ( s : string ) : T - A function that takes a\\n//    string and casts it to a desired format. If left out the string is just\\n//    returned\\n// fCompareFunction : function ( n1 : T, n2 : T ) : Number - A normal JS sort\\n//    compare function. Takes two values and compares them. If left out less than,\\n//    <, compare is used\\n// fGetRowValue : function( oRow : HTMLTRElement, nColumn : int ) : T - A function\\n//    that takes the row and the column index and returns the value used to compare.\\n//    If left out then the innerText is first taken for the cell and then the\\n//    fGetValueFromString is used to convert that string the desired value and type\\n\\nSortableTable.prototype.addSortType = function (sType, fGetValueFromString, fCompareFunction, fGetRowValue) {\\n\\tthis._sortTypeInfo[sType] = {\\n\\t\\ttype:\\t\\t\\t\\tsType,\\n\\t\\tgetValueFromString:\\tfGetValueFromString || SortableTable.idFunction,\\n\\t\\tcompare:\\t\\t\\tfCompareFunction || SortableTable.basicCompare,\\n\\t\\tgetRowValue:\\t\\tfGetRowValue\\n\\t};\\n};\\n\\n// this removes the sort type from all instances of SortableTable\\nSortableTable.prototype.removeSortType = function (sType) {\\n\\tdelete this._sortTypeInfo[sType];\\n};\\n\\nSortableTable.basicCompare = function compare(n1, n2) {\\n\\tif (n1.value < n2.value)\\n\\t\\treturn -1;\\n\\tif (n2.value < n1.value)\\n\\t\\treturn 1;\\n\\treturn 0;\\n};\\n\\nSortableTable.idFunction = function (x) {\\n\\treturn x;\\n};\\n\\nSortableTable.toUpperCase = function (s) {\\n\\treturn s.toUpperCase();\\n};\\n\\nSortableTable.toDate = function (s) {\\n\\tvar parts = s.split(\\\"-\\\");\\n\\tvar d = new Date(0);\\n\\td.setFullYear(parts[0]);\\n\\td.setDate(parts[2]);\\n\\td.setMonth(parts[1] - 1);\\n\\treturn d.valueOf();\\n};\\n\\n\\n// add sort types\\nSortableTable.prototype.addSortType(\\\"Number\\\", Number);\\nSortableTable.prototype.addSortType(\\\"CaseInsensitiveString\\\", SortableTable.toUpperCase);\\nSortableTable.prototype.addSortType(\\\"Date\\\", SortableTable.toDate);\\nSortableTable.prototype.addSortType(\\\"String\\\");\\n// None is a special case\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./libs/sortabletable.js\n// module id = 446\n// module chunks = 0","/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\nmodule.exports = function(src) {\r\n\tif (typeof execScript !== \"undefined\")\r\n\t\texecScript(src);\r\n\telse\r\n\t\teval.call(null, src);\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/script-loader/addScript.js\n// module id = 447\n// module chunks = 0","require(\"!!/Users/rene/Desktop/TableFilter/node_modules/script-loader/addScript.js\")(require(\"!!/Users/rene/Desktop/TableFilter/node_modules/raw-loader/index.js!/Users/rene/Desktop/TableFilter/libs/sortabletable.js\"))\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/script-loader!./libs/sortabletable.js\n// module id = 448\n// module chunks = 0"],"sourceRoot":""}